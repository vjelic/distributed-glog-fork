{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "ad7e35ef-769a-3154-9e6d-61ebb9036dea",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "394f290d-f748-3353-b7e3-4e9953ad9565",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "0f72025d-8a99-319d-b990-b321489f9f85",
              "name": "resources.rules.useless-assignment-keyed",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-assignment-keyed"
              },
              "fullDescription": {
                "text": "key `$Y` in `$X` is assigned twice; the first assignment is useless"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "key `$Y` in `$X` is assigned twice; the first assignment is useless\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "key `$Y` in `$X` is assigned twice; the first assignment is useless\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-assignment-keyed"
                ]
              }
            },
            {
              "id": "a155ab58-a05f-37da-a7a0-52cbc5919f90",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "31a1b6fa-5c64-3d92-8afe-b94f9f0196ac",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "2a31d592-a81e-3daa-9417-1a2279d36e87",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "fd0e936a-cd04-34cf-a2a5-f1555adcce8c",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "e2bd56c7-0f20-3f52-bec9-1d31d49c9eeb",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "dbafc7ae-f97b-345b-9baa-60c98966b4c4",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "c2fa4e36-7a08-3975-a8b7-9ae32a79cb9d",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "917a6aca-74e2-3789-bcbe-490b4b92ba88",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "74f051ae-064f-3f91-89cc-0cbd4a59811c",
              "name": "resources.rules.code-after-unconditional-return",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.code-after-unconditional-return"
              },
              "fullDescription": {
                "text": "code after return statement will not be executed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "code after return statement will not be executed\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "code after return statement will not be executed\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.code-after-unconditional-return"
                ]
              }
            },
            {
              "id": "b4cc4f14-aba3-3652-a991-0ee46b45f89b",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "8877b2b8-0d8d-387c-b982-0701b7afd6df",
              "name": "resources.rules.use-sys-exit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-sys-exit"
              },
              "fullDescription": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-sys-exit"
                ]
              }
            },
            {
              "id": "b5a5788d-02b8-37b3-9092-c58da3d8e0a1",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "5ecb1f76-96ee-3437-bf39-3148df246087",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "f8310485-56d5-3ada-a4a2-0ae304038057",
              "name": "python.lang.security.insecure-uuid-version.insecure-uuid-version",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.insecure-uuid-version.insecure-uuid-version"
              },
              "fullDescription": {
                "text": "Using UUID version 1 for UUID generation can lead to predictable UUIDs based on system information (e.g., MAC address, timestamp). This may lead to security risks such as the sandwich attack. Consider using `uuid.uuid4()` instead for better randomness and security."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.insecure-uuid-version.insecure-uuid-version",
              "help": {
                "text": "Using UUID version 1 for UUID generation can lead to predictable UUIDs based on system information (e.g., MAC address, timestamp). This may lead to security risks such as the sandwich attack. Consider using `uuid.uuid4()` instead for better randomness and security.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Using UUID version 1 for UUID generation can lead to predictable UUIDs based on system information (e.g., MAC address, timestamp). This may lead to security risks such as the sandwich attack. Consider using `uuid.uuid4()` instead for better randomness and security.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.insecure-uuid-version.insecure-uuid-version)\n - [https://www.landh.tech/blog/20230811-sandwich-attack/](https://www.landh.tech/blog/20230811-sandwich-attack/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.insecure-uuid-version.insecure-uuid-version"
                ]
              }
            },
            {
              "id": "83dec664-e4a9-33c4-8933-6fed81065e3b",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "b51dfbf9-b3b1-3839-a7cc-18193c4859be",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "cdd4d404-dd54-3f38-a39d-08115cf07436",
              "name": "resources.rules.missing-ratelimit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-ratelimit"
              },
              "fullDescription": {
                "text": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/jsocol/django-ratelimit/blob/main/docs/index.rst#quickstart](https://github.com/jsocol/django-ratelimit/blob/main/docs/index.rst#quickstart)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-ratelimit"
                ]
              }
            },
            {
              "id": "fe4f80b9-ef59-3009-a4b9-29767cce57fa",
              "name": "javascript.lang.security.detect-insecure-websocket.detect-insecure-websocket",
              "shortDescription": {
                "text": "Opengrep Finding: javascript.lang.security.detect-insecure-websocket.detect-insecure-websocket"
              },
              "fullDescription": {
                "text": "Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/javascript.lang.security.detect-insecure-websocket.detect-insecure-websocket",
              "help": {
                "text": "Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.lang.security.detect-insecure-websocket.detect-insecure-websocket)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "javascript.lang.security.detect-insecure-websocket.detect-insecure-websocket"
                ]
              }
            },
            {
              "id": "8a29db78-2434-3948-933e-1d85181081eb",
              "name": "javascript.lang.security.detect-insecure-websocket.detect-insecure-websocket",
              "shortDescription": {
                "text": "Opengrep Finding: javascript.lang.security.detect-insecure-websocket.detect-insecure-websocket"
              },
              "fullDescription": {
                "text": "Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/javascript.lang.security.detect-insecure-websocket.detect-insecure-websocket",
              "help": {
                "text": "Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.lang.security.detect-insecure-websocket.detect-insecure-websocket)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "javascript.lang.security.detect-insecure-websocket.detect-insecure-websocket"
                ]
              }
            },
            {
              "id": "0117b943-807f-3785-9027-8e71818f76e8",
              "name": "javascript.lang.security.detect-insecure-websocket.detect-insecure-websocket",
              "shortDescription": {
                "text": "Opengrep Finding: javascript.lang.security.detect-insecure-websocket.detect-insecure-websocket"
              },
              "fullDescription": {
                "text": "Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/javascript.lang.security.detect-insecure-websocket.detect-insecure-websocket",
              "help": {
                "text": "Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.lang.security.detect-insecure-websocket.detect-insecure-websocket)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "javascript.lang.security.detect-insecure-websocket.detect-insecure-websocket"
                ]
              }
            },
            {
              "id": "7966845c-661f-3e97-b6fc-07e294f05980",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "ce896161-f515-3f10-a563-dd6c4556faa8",
              "name": "resources.rules.pdb-remove",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.pdb-remove"
              },
              "fullDescription": {
                "text": "pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.pdb-remove"
                ]
              }
            },
            {
              "id": "7b56724f-cd5b-31a5-8fa7-f76edd9ed266",
              "name": "resources.rules.identical-is-comparison",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.identical-is-comparison"
              },
              "fullDescription": {
                "text": "Found identical comparison using is. Ensure this is what you intended."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Found identical comparison using is. Ensure this is what you intended.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found identical comparison using is. Ensure this is what you intended.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.identical-is-comparison"
                ]
              }
            },
            {
              "id": "08b9b9c0-294a-39e8-8e36-afaa5de3daac",
              "name": "python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2",
              "shortDescription": {
                "text": "Opengrep Finding: python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2"
              },
              "fullDescription": {
                "text": "Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2",
              "help": {
                "text": "Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2)\n - [https://jinja.palletsprojects.com/en/2.11.x/api/#basics](https://jinja.palletsprojects.com/en/2.11.x/api/#basics)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2"
                ]
              }
            },
            {
              "id": "e9dbb713-c383-397b-9142-aa12f5bf8254",
              "name": "resources.rules.useless-assignment-keyed",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-assignment-keyed"
              },
              "fullDescription": {
                "text": "key `$Y` in `$X` is assigned twice; the first assignment is useless"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "key `$Y` in `$X` is assigned twice; the first assignment is useless\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "key `$Y` in `$X` is assigned twice; the first assignment is useless\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-assignment-keyed"
                ]
              }
            },
            {
              "id": "404109e8-2510-301d-81a9-25c7efd0ae3e",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "b75b8e7a-4717-3a0c-8d4d-250d876e4e36",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "3231c16f-4eb4-3562-b1c2-57f668a1e5ac",
              "name": "python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2",
              "shortDescription": {
                "text": "Opengrep Finding: python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2"
              },
              "fullDescription": {
                "text": "Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2",
              "help": {
                "text": "Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2)\n - [https://jinja.palletsprojects.com/en/2.11.x/api/#basics](https://jinja.palletsprojects.com/en/2.11.x/api/#basics)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2"
                ]
              }
            },
            {
              "id": "18ccd8fe-311a-3fe1-b6e6-c71b91a4e4e6",
              "name": "html.security.audit.missing-integrity.missing-integrity",
              "shortDescription": {
                "text": "Opengrep Finding: html.security.audit.missing-integrity.missing-integrity"
              },
              "fullDescription": {
                "text": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) youâ€™re telling the browser to fetch in the 'integrity' attribute for all externally hosted files."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/html.security.audit.missing-integrity.missing-integrity",
              "help": {
                "text": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) youâ€™re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) youâ€™re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/html.security.audit.missing-integrity.missing-integrity)\n - [https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures](https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "html.security.audit.missing-integrity.missing-integrity"
                ]
              }
            },
            {
              "id": "273ef698-8942-32d0-9361-1da08e1673fc",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "63d18436-e9a6-30bd-a36b-367b3e7d4188",
              "name": "resources.rules.code-after-unconditional-return",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.code-after-unconditional-return"
              },
              "fullDescription": {
                "text": "code after return statement will not be executed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "code after return statement will not be executed\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "code after return statement will not be executed\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.code-after-unconditional-return"
                ]
              }
            },
            {
              "id": "1cc6a140-d2f8-38d1-834c-16eb593df44d",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "6aa0a486-f6dd-30eb-8b91-46ea569c23cf",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "cd454562-e8ee-3e3b-b294-eced86e64810",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "f5119235-cc97-3b56-b164-31a3df8fa5e7",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "ed4865ea-c5b6-38b4-8ad7-5cca47ed17a0",
              "name": "resources.rules.dangerous-asyncio-create-exec",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-asyncio-create-exec"
              },
              "fullDescription": {
                "text": "Detected 'create_subprocess_exec' function without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected 'create_subprocess_exec' function without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected 'create_subprocess_exec' function without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_exec](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_exec)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-asyncio-create-exec"
                ]
              }
            },
            {
              "id": "7fb11ab8-45f8-3afb-9ab2-35e56e85bce2",
              "name": "resources.rules.dangerous-asyncio-create-exec",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-asyncio-create-exec"
              },
              "fullDescription": {
                "text": "Detected 'create_subprocess_exec' function without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected 'create_subprocess_exec' function without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected 'create_subprocess_exec' function without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_exec](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_exec)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-asyncio-create-exec"
                ]
              }
            },
            {
              "id": "5753c95e-b6aa-395c-91ef-ea8b6289d52c",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "5eb21bbb-701e-398a-84a4-d7249f2e9c9a",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "9b98468c-28b9-3c1a-83bb-0782124e6a9d",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "3984ce85-22f9-3c45-acdd-d0be11149ff0",
              "name": "resources.rules.identical-is-comparison",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.identical-is-comparison"
              },
              "fullDescription": {
                "text": "Found identical comparison using is. Ensure this is what you intended."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Found identical comparison using is. Ensure this is what you intended.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found identical comparison using is. Ensure this is what you intended.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.identical-is-comparison"
                ]
              }
            },
            {
              "id": "257ae9e7-5ae5-31a5-8d2f-c457a0861a2d",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "21111eb0-a695-3ac3-a082-d9ff25247731",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "262b38b3-5225-36c6-80c3-1c13766666a3",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "40a5e99a-42ba-3aa5-8ce7-c3c08b234e58",
              "name": "resources.rules.identical-is-comparison",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.identical-is-comparison"
              },
              "fullDescription": {
                "text": "Found identical comparison using is. Ensure this is what you intended."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Found identical comparison using is. Ensure this is what you intended.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found identical comparison using is. Ensure this is what you intended.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.identical-is-comparison"
                ]
              }
            },
            {
              "id": "ac3c09ec-12cd-3ae6-87a6-bf90a9453460",
              "name": "python.lang.security.audit.non-literal-import.non-literal-import",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.non-literal-import.non-literal-import"
              },
              "fullDescription": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import",
              "help": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.non-literal-import.non-literal-import"
                ]
              }
            },
            {
              "id": "8a485a59-4a98-3356-8072-5cf0bad037f0",
              "name": "resources.rules.missing-ratelimit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-ratelimit"
              },
              "fullDescription": {
                "text": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/jsocol/django-ratelimit/blob/main/docs/index.rst#quickstart](https://github.com/jsocol/django-ratelimit/blob/main/docs/index.rst#quickstart)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-ratelimit"
                ]
              }
            },
            {
              "id": "d707fceb-8935-30a2-b869-42e68575cc7c",
              "name": "resources.rules.template-href-var",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.template-href-var"
              },
              "fullDescription": {
                "text": "Detected a template variable used in an anchor tag with\nthe 'href' attribute. This allows a malicious actor to\ninput the 'javascript:' URI and is subject to cross-\nsite scripting (XSS) attacks. Use the 'url' template tag\nto safely generate a URL. You may also consider setting\nthe Content Security Policy (CSP) header.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected a template variable used in an anchor tag with\nthe 'href' attribute. This allows a malicious actor to\ninput the 'javascript:' URI and is subject to cross-\nsite scripting (XSS) attacks. Use the 'url' template tag\nto safely generate a URL. You may also consider setting\nthe Content Security Policy (CSP) header.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected a template variable used in an anchor tag with\nthe 'href' attribute. This allows a malicious actor to\ninput the 'javascript:' URI and is subject to cross-\nsite scripting (XSS) attacks. Use the 'url' template tag\nto safely generate a URL. You may also consider setting\nthe Content Security Policy (CSP) header.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss](https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss)\n - [https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url](https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url)\n - [https://content-security-policy.com/](https://content-security-policy.com/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.template-href-var"
                ]
              }
            },
            {
              "id": "07d3fafd-ec12-3643-aa3f-457bac19d47b",
              "name": "resources.rules.missing-noopener",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-noopener"
              },
              "fullDescription": {
                "text": "This anchor tag with 'target=\"_blank\"' is missing 'noopener'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noopener' on this tag"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "This anchor tag with 'target=\"_blank\"' is missing 'noopener'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noopener' on this tag\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This anchor tag with 'target=\"_blank\"' is missing 'noopener'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noopener' on this tag\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-noopener"
                ]
              }
            },
            {
              "id": "ebd034b3-9245-3d19-874c-a84f91ca9c4c",
              "name": "resources.rules.template-href-var",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.template-href-var"
              },
              "fullDescription": {
                "text": "Detected a template variable used in an anchor tag with\nthe 'href' attribute. This allows a malicious actor to\ninput the 'javascript:' URI and is subject to cross-\nsite scripting (XSS) attacks. Use the 'url' template tag\nto safely generate a URL. You may also consider setting\nthe Content Security Policy (CSP) header.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected a template variable used in an anchor tag with\nthe 'href' attribute. This allows a malicious actor to\ninput the 'javascript:' URI and is subject to cross-\nsite scripting (XSS) attacks. Use the 'url' template tag\nto safely generate a URL. You may also consider setting\nthe Content Security Policy (CSP) header.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected a template variable used in an anchor tag with\nthe 'href' attribute. This allows a malicious actor to\ninput the 'javascript:' URI and is subject to cross-\nsite scripting (XSS) attacks. Use the 'url' template tag\nto safely generate a URL. You may also consider setting\nthe Content Security Policy (CSP) header.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss](https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss)\n - [https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url](https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url)\n - [https://content-security-policy.com/](https://content-security-policy.com/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.template-href-var"
                ]
              }
            },
            {
              "id": "9672d329-005c-3d5e-8680-71d1da538dec",
              "name": "resources.rules.missing-noopener",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-noopener"
              },
              "fullDescription": {
                "text": "This anchor tag with 'target=\"_blank\"' is missing 'noopener'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noopener' on this tag"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "This anchor tag with 'target=\"_blank\"' is missing 'noopener'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noopener' on this tag\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This anchor tag with 'target=\"_blank\"' is missing 'noopener'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noopener' on this tag\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-noopener"
                ]
              }
            },
            {
              "id": "352d12f9-cece-3040-a82d-eb31b5c1b6d1",
              "name": "html.security.audit.missing-integrity.missing-integrity",
              "shortDescription": {
                "text": "Opengrep Finding: html.security.audit.missing-integrity.missing-integrity"
              },
              "fullDescription": {
                "text": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) youâ€™re telling the browser to fetch in the 'integrity' attribute for all externally hosted files."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/html.security.audit.missing-integrity.missing-integrity",
              "help": {
                "text": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) youâ€™re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) youâ€™re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/html.security.audit.missing-integrity.missing-integrity)\n - [https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures](https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "html.security.audit.missing-integrity.missing-integrity"
                ]
              }
            },
            {
              "id": "0adb3eb5-f93c-3bac-b5f6-df66fbccd6ee",
              "name": "resources.rules.template-href-var",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.template-href-var"
              },
              "fullDescription": {
                "text": "Detected a template variable used in an anchor tag with\nthe 'href' attribute. This allows a malicious actor to\ninput the 'javascript:' URI and is subject to cross-\nsite scripting (XSS) attacks. Use the 'url' template tag\nto safely generate a URL. You may also consider setting\nthe Content Security Policy (CSP) header.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected a template variable used in an anchor tag with\nthe 'href' attribute. This allows a malicious actor to\ninput the 'javascript:' URI and is subject to cross-\nsite scripting (XSS) attacks. Use the 'url' template tag\nto safely generate a URL. You may also consider setting\nthe Content Security Policy (CSP) header.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected a template variable used in an anchor tag with\nthe 'href' attribute. This allows a malicious actor to\ninput the 'javascript:' URI and is subject to cross-\nsite scripting (XSS) attacks. Use the 'url' template tag\nto safely generate a URL. You may also consider setting\nthe Content Security Policy (CSP) header.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss](https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss)\n - [https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url](https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url)\n - [https://content-security-policy.com/](https://content-security-policy.com/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.template-href-var"
                ]
              }
            },
            {
              "id": "a1e63aa5-7069-391f-83d0-253dd365ea06",
              "name": "resources.rules.template-href-var",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.template-href-var"
              },
              "fullDescription": {
                "text": "Detected a template variable used in an anchor tag with\nthe 'href' attribute. This allows a malicious actor to\ninput the 'javascript:' URI and is subject to cross-\nsite scripting (XSS) attacks. Use the 'url' template tag\nto safely generate a URL. You may also consider setting\nthe Content Security Policy (CSP) header.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected a template variable used in an anchor tag with\nthe 'href' attribute. This allows a malicious actor to\ninput the 'javascript:' URI and is subject to cross-\nsite scripting (XSS) attacks. Use the 'url' template tag\nto safely generate a URL. You may also consider setting\nthe Content Security Policy (CSP) header.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected a template variable used in an anchor tag with\nthe 'href' attribute. This allows a malicious actor to\ninput the 'javascript:' URI and is subject to cross-\nsite scripting (XSS) attacks. Use the 'url' template tag\nto safely generate a URL. You may also consider setting\nthe Content Security Policy (CSP) header.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss](https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss)\n - [https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url](https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url)\n - [https://content-security-policy.com/](https://content-security-policy.com/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.template-href-var"
                ]
              }
            },
            {
              "id": "ac674014-8768-374b-a7ab-5bf98a046f04",
              "name": "resources.rules.template-href-var",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.template-href-var"
              },
              "fullDescription": {
                "text": "Detected a template variable used in an anchor tag with\nthe 'href' attribute. This allows a malicious actor to\ninput the 'javascript:' URI and is subject to cross-\nsite scripting (XSS) attacks. Use the 'url' template tag\nto safely generate a URL. You may also consider setting\nthe Content Security Policy (CSP) header.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected a template variable used in an anchor tag with\nthe 'href' attribute. This allows a malicious actor to\ninput the 'javascript:' URI and is subject to cross-\nsite scripting (XSS) attacks. Use the 'url' template tag\nto safely generate a URL. You may also consider setting\nthe Content Security Policy (CSP) header.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected a template variable used in an anchor tag with\nthe 'href' attribute. This allows a malicious actor to\ninput the 'javascript:' URI and is subject to cross-\nsite scripting (XSS) attacks. Use the 'url' template tag\nto safely generate a URL. You may also consider setting\nthe Content Security Policy (CSP) header.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss](https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss)\n - [https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url](https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url)\n - [https://content-security-policy.com/](https://content-security-policy.com/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.template-href-var"
                ]
              }
            },
            {
              "id": "dc97d0c3-e4ae-3278-85bd-c22bb9926645",
              "name": "resources.rules.template-href-var",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.template-href-var"
              },
              "fullDescription": {
                "text": "Detected a template variable used in an anchor tag with\nthe 'href' attribute. This allows a malicious actor to\ninput the 'javascript:' URI and is subject to cross-\nsite scripting (XSS) attacks. Use the 'url' template tag\nto safely generate a URL. You may also consider setting\nthe Content Security Policy (CSP) header.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected a template variable used in an anchor tag with\nthe 'href' attribute. This allows a malicious actor to\ninput the 'javascript:' URI and is subject to cross-\nsite scripting (XSS) attacks. Use the 'url' template tag\nto safely generate a URL. You may also consider setting\nthe Content Security Policy (CSP) header.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected a template variable used in an anchor tag with\nthe 'href' attribute. This allows a malicious actor to\ninput the 'javascript:' URI and is subject to cross-\nsite scripting (XSS) attacks. Use the 'url' template tag\nto safely generate a URL. You may also consider setting\nthe Content Security Policy (CSP) header.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss](https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss)\n - [https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url](https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url)\n - [https://content-security-policy.com/](https://content-security-policy.com/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.template-href-var"
                ]
              }
            },
            {
              "id": "370f4764-6151-3567-8158-11a6945246db",
              "name": "resources.rules.template-href-var",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.template-href-var"
              },
              "fullDescription": {
                "text": "Detected a template variable used in an anchor tag with\nthe 'href' attribute. This allows a malicious actor to\ninput the 'javascript:' URI and is subject to cross-\nsite scripting (XSS) attacks. Use the 'url' template tag\nto safely generate a URL. You may also consider setting\nthe Content Security Policy (CSP) header.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected a template variable used in an anchor tag with\nthe 'href' attribute. This allows a malicious actor to\ninput the 'javascript:' URI and is subject to cross-\nsite scripting (XSS) attacks. Use the 'url' template tag\nto safely generate a URL. You may also consider setting\nthe Content Security Policy (CSP) header.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected a template variable used in an anchor tag with\nthe 'href' attribute. This allows a malicious actor to\ninput the 'javascript:' URI and is subject to cross-\nsite scripting (XSS) attacks. Use the 'url' template tag\nto safely generate a URL. You may also consider setting\nthe Content Security Policy (CSP) header.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss](https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss)\n - [https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url](https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url)\n - [https://content-security-policy.com/](https://content-security-policy.com/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.template-href-var"
                ]
              }
            },
            {
              "id": "3c9b9dd2-7627-3b2a-b28d-8e10804450af",
              "name": "resources.rules.template-href-var",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.template-href-var"
              },
              "fullDescription": {
                "text": "Detected a template variable used in an anchor tag with\nthe 'href' attribute. This allows a malicious actor to\ninput the 'javascript:' URI and is subject to cross-\nsite scripting (XSS) attacks. Use the 'url' template tag\nto safely generate a URL. You may also consider setting\nthe Content Security Policy (CSP) header.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected a template variable used in an anchor tag with\nthe 'href' attribute. This allows a malicious actor to\ninput the 'javascript:' URI and is subject to cross-\nsite scripting (XSS) attacks. Use the 'url' template tag\nto safely generate a URL. You may also consider setting\nthe Content Security Policy (CSP) header.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected a template variable used in an anchor tag with\nthe 'href' attribute. This allows a malicious actor to\ninput the 'javascript:' URI and is subject to cross-\nsite scripting (XSS) attacks. Use the 'url' template tag\nto safely generate a URL. You may also consider setting\nthe Content Security Policy (CSP) header.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss](https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss)\n - [https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url](https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url)\n - [https://content-security-policy.com/](https://content-security-policy.com/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.template-href-var"
                ]
              }
            },
            {
              "id": "749d296f-9396-3095-8d09-dc0acaf85f3c",
              "name": "resources.rules.template-href-var",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.template-href-var"
              },
              "fullDescription": {
                "text": "Detected a template variable used in an anchor tag with\nthe 'href' attribute. This allows a malicious actor to\ninput the 'javascript:' URI and is subject to cross-\nsite scripting (XSS) attacks. Use the 'url' template tag\nto safely generate a URL. You may also consider setting\nthe Content Security Policy (CSP) header.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected a template variable used in an anchor tag with\nthe 'href' attribute. This allows a malicious actor to\ninput the 'javascript:' URI and is subject to cross-\nsite scripting (XSS) attacks. Use the 'url' template tag\nto safely generate a URL. You may also consider setting\nthe Content Security Policy (CSP) header.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected a template variable used in an anchor tag with\nthe 'href' attribute. This allows a malicious actor to\ninput the 'javascript:' URI and is subject to cross-\nsite scripting (XSS) attacks. Use the 'url' template tag\nto safely generate a URL. You may also consider setting\nthe Content Security Policy (CSP) header.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss](https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss)\n - [https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url](https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url)\n - [https://content-security-policy.com/](https://content-security-policy.com/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.template-href-var"
                ]
              }
            },
            {
              "id": "2eca56c7-9d63-313e-9052-52babdc1939e",
              "name": "python.lang.security.audit.non-literal-import.non-literal-import",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.non-literal-import.non-literal-import"
              },
              "fullDescription": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import",
              "help": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.non-literal-import.non-literal-import"
                ]
              }
            },
            {
              "id": "d3dad5e4-922b-3a7b-a074-08795c4b57f0",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "541c0267-1560-3570-9973-1ec87ebe118b",
              "name": "resources.rules.useless-inner-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-inner-function"
              },
              "fullDescription": {
                "text": "function `$FF` is defined inside a function but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "function `$FF` is defined inside a function but never used\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "function `$FF` is defined inside a function but never used\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-inner-function"
                ]
              }
            },
            {
              "id": "f1538fcf-736e-3b20-ba75-2d4ccca7c4d0",
              "name": "python.lang.security.audit.non-literal-import.non-literal-import",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.non-literal-import.non-literal-import"
              },
              "fullDescription": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import",
              "help": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.non-literal-import.non-literal-import"
                ]
              }
            },
            {
              "id": "f0215efc-aa71-38bf-94d0-97cf1dd89694",
              "name": "resources.rules.insecure-compile-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-compile-use"
              },
              "fullDescription": {
                "text": "The Python 'compile' function is not secure against maliciously constructed input"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The Python 'compile' function is not secure against maliciously constructed input\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The Python 'compile' function is not secure against maliciously constructed input\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-compile-use"
                ]
              }
            },
            {
              "id": "fc6e1211-1de0-3c1e-a5e7-d584218cc4ed",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "14607a34-f9e2-3dfb-b353-0a9456cde12c",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "f8be17ac-f055-3207-bff9-7188b8108b8b",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "8b28a236-749d-32b4-b116-318ed5596334",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "1abecc3e-a081-3227-b45b-30d42c057fa0",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "dec06548-f03e-3b27-81dd-42b3be977fac",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "3624918b-31c7-34df-897b-72e64accbc23",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "c0c48bc6-d5c7-32a4-97fc-0d3377c655d6",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "78cd7e31-c9ba-3a5b-8b54-06d03313fc7c",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "fddb712d-d48e-3e15-bdca-b5ec3ee4ab73",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "3f7a9da4-bb88-3a01-ab4b-bad08f9acde0",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "6c150d0f-9200-357d-bf8c-698a6688167c",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "cf251c26-b58a-369b-99a4-2a20ed5db4b7",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "9ff24156-ec45-3498-8dce-203214a1af00",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "544461a5-5260-33fc-8b3c-ce5490bab963",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "a4c96d07-164b-358a-b009-10bfb6a97a11",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "5fc0d116-1967-3ed0-9a37-72b09cad54e0",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "2ac2d316-969b-31bc-87f4-add62e3c53ca",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "ddbf2ff9-52e8-306d-b638-7b96612d5f58",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "bea5fa53-24b2-334f-8693-85dcb50b761d",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "39e4e273-3544-3ede-9795-8c62d04dd363",
              "name": "python.lang.security.audit.non-literal-import.non-literal-import",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.non-literal-import.non-literal-import"
              },
              "fullDescription": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import",
              "help": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.non-literal-import.non-literal-import"
                ]
              }
            },
            {
              "id": "c611d16e-f788-3bec-a2d3-89070f8cf2a2",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "976daa18-f30f-3763-9120-e163566a859c",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "c7305651-91fc-39ef-9775-712aecfb3e49",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "009bff58-8631-3ea6-b29f-8607e732031c",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "0f5496e3-a0ac-3d41-8c18-efc9a7c3d7ab",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "99003ef4-9238-32d0-a3e8-6d85bdcd253c",
              "name": "resources.rules.pdb-remove",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.pdb-remove"
              },
              "fullDescription": {
                "text": "pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.pdb-remove"
                ]
              }
            },
            {
              "id": "0f0ad707-7257-3615-a4ac-40b744aff676",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "15cf5035-39a9-3e3f-91e8-c246e687a74c",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "0ccc0909-f4ad-3ab6-ad7e-8f4477cab0b8",
              "name": "resources.rules.pdb-remove",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.pdb-remove"
              },
              "fullDescription": {
                "text": "pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.pdb-remove"
                ]
              }
            },
            {
              "id": "e4217b59-bc1b-3d99-b9ae-0b0ac0e7b7f3",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "81f99891-0157-35aa-8f04-e5a28a2e86ef",
              "name": "resources.rules.pdb-remove",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.pdb-remove"
              },
              "fullDescription": {
                "text": "pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.pdb-remove"
                ]
              }
            },
            {
              "id": "e840e4ca-31b3-318c-8701-747887da0e77",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "11e1eff9-e848-37c8-9f4e-a7aed36bc4a2",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "b023257f-a9cd-3398-b8ea-892076bf087e",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "505ecfaf-5af1-3850-a6c0-b89b63cfd215",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "c5dd245a-580f-345d-a3be-3a7b16296d0e",
              "name": "python.lang.security.audit.insecure-transport.ssl.no-set-ciphers.no-set-ciphers",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.insecure-transport.ssl.no-set-ciphers.no-set-ciphers"
              },
              "fullDescription": {
                "text": "The 'ssl' module disables insecure cipher suites by default. Therefore, use of 'set_ciphers()' should only be used when you have very specialized requirements. Otherwise, you risk lowering the security of the SSL channel."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.insecure-transport.ssl.no-set-ciphers.no-set-ciphers",
              "help": {
                "text": "The 'ssl' module disables insecure cipher suites by default. Therefore, use of 'set_ciphers()' should only be used when you have very specialized requirements. Otherwise, you risk lowering the security of the SSL channel.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The 'ssl' module disables insecure cipher suites by default. Therefore, use of 'set_ciphers()' should only be used when you have very specialized requirements. Otherwise, you risk lowering the security of the SSL channel.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.insecure-transport.ssl.no-set-ciphers.no-set-ciphers)\n - [https://docs.python.org/3/library/ssl.html#cipher-selection](https://docs.python.org/3/library/ssl.html#cipher-selection)\n - [https://docs.python.org/3/library/ssl.html#ssl.SSLContext.set_ciphers](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.set_ciphers)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.insecure-transport.ssl.no-set-ciphers.no-set-ciphers"
                ]
              }
            },
            {
              "id": "2943445f-7f32-37c1-a683-fda7817f6031",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "3b817771-c302-30aa-81cf-f4b4006af566",
              "name": "resources.rules.useless-inner-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-inner-function"
              },
              "fullDescription": {
                "text": "function `$FF` is defined inside a function but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "function `$FF` is defined inside a function but never used\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "function `$FF` is defined inside a function but never used\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-inner-function"
                ]
              }
            },
            {
              "id": "6b2825fd-e846-372e-a276-c4d62a3674af",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "606bb5f0-7a4c-37b9-9105-d4ddb8b82280",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "88041415-fb35-3d2d-822f-20f1ed0dfde0",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "4b99552b-429a-38bf-9eb6-919071b1244b",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "f5079204-b02f-33c9-809d-5a61e51aa210",
              "name": "resources.rules.pdb-remove",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.pdb-remove"
              },
              "fullDescription": {
                "text": "pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.pdb-remove"
                ]
              }
            },
            {
              "id": "21c65824-580c-3906-8153-cf904b9b6f8b",
              "name": "resources.rules.pdb-remove",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.pdb-remove"
              },
              "fullDescription": {
                "text": "pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.pdb-remove"
                ]
              }
            },
            {
              "id": "52e43caf-a095-3224-bbf7-1980460c0b12",
              "name": "resources.rules.use-defused-xml",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-defused-xml"
              },
              "fullDescription": {
                "text": "Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE)\nattacks. The Python documentation recommends the 'defusedxml' library instead. Use 'defusedxml'.\nSee https://github.com/tiran/defusedxml for more information.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE)\nattacks. The Python documentation recommends the 'defusedxml' library instead. Use 'defusedxml'.\nSee https://github.com/tiran/defusedxml for more information.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE)\nattacks. The Python documentation recommends the 'defusedxml' library instead. Use 'defusedxml'.\nSee https://github.com/tiran/defusedxml for more information.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://docs.python.org/3/library/xml.html](https://docs.python.org/3/library/xml.html)\n - [https://github.com/tiran/defusedxml](https://github.com/tiran/defusedxml)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-defused-xml"
                ]
              }
            },
            {
              "id": "b1d16f31-195f-3859-94a9-e9ab2df6982d",
              "name": "python.lang.security.audit.non-literal-import.non-literal-import",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.non-literal-import.non-literal-import"
              },
              "fullDescription": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import",
              "help": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.non-literal-import.non-literal-import"
                ]
              }
            },
            {
              "id": "2b42dfb7-ba5c-3ea0-8f29-007c03fe61a3",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "f87bdf14-fbc2-35c6-a393-3fb707a09222",
              "name": "resources.rules.pdb-remove",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.pdb-remove"
              },
              "fullDescription": {
                "text": "pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.pdb-remove"
                ]
              }
            },
            {
              "id": "90191f17-c65a-3030-a625-6e175bedd1e6",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "238b5cd1-94e4-3974-95a2-a27582a41382",
              "name": "python.lang.security.audit.non-literal-import.non-literal-import",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.non-literal-import.non-literal-import"
              },
              "fullDescription": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import",
              "help": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.non-literal-import.non-literal-import"
                ]
              }
            },
            {
              "id": "2d8e0e4d-219b-339e-a9fa-5192191df0fb",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "9b4a38be-62cb-3ea5-95cb-42f1b94a51b1",
              "name": "python.lang.security.audit.non-literal-import.non-literal-import",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.non-literal-import.non-literal-import"
              },
              "fullDescription": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import",
              "help": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.non-literal-import.non-literal-import"
                ]
              }
            },
            {
              "id": "44745323-f975-302d-b9b5-dc492614f7ae",
              "name": "resources.rules.insecure-hash-algorithm-md5",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-hash-algorithm-md5"
              },
              "fullDescription": {
                "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://tools.ietf.org/html/rfc6151](https://tools.ietf.org/html/rfc6151)\n - [https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision](https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision)\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-hash-algorithm-md5"
                ]
              }
            },
            {
              "id": "19844304-4890-3b5b-b0b9-815c38277cd9",
              "name": "resources.rules.insecure-xml-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-xml-use"
              },
              "fullDescription": {
                "text": "Insecure XML parsing functionality, prefer 'defusedxml'"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Insecure XML parsing functionality, prefer 'defusedxml'\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Insecure XML parsing functionality, prefer 'defusedxml'\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-xml-use"
                ]
              }
            },
            {
              "id": "5265e71e-8ac5-33ca-865c-f9a5488623d6",
              "name": "python.lang.security.audit.non-literal-import.non-literal-import",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.non-literal-import.non-literal-import"
              },
              "fullDescription": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import",
              "help": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.non-literal-import.non-literal-import"
                ]
              }
            },
            {
              "id": "08266d15-9c6c-3c2d-ad52-ea2c1ab30def",
              "name": "python.lang.security.audit.non-literal-import.non-literal-import",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.non-literal-import.non-literal-import"
              },
              "fullDescription": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import",
              "help": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.non-literal-import.non-literal-import"
                ]
              }
            },
            {
              "id": "ec2e85ba-762b-3fcd-a128-f891a2963df4",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "c058a88e-b1fc-38e8-a170-921d3838ec69",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "5f609fca-c70c-36f1-938e-0fb7897749c1",
              "name": "resources.rules.useless-inner-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-inner-function"
              },
              "fullDescription": {
                "text": "function `$FF` is defined inside a function but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "function `$FF` is defined inside a function but never used\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "function `$FF` is defined inside a function but never used\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-inner-function"
                ]
              }
            },
            {
              "id": "3e8be17a-0114-38c7-8b7c-bae3cb96f903",
              "name": "resources.rules.useless-inner-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-inner-function"
              },
              "fullDescription": {
                "text": "function `$FF` is defined inside a function but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "function `$FF` is defined inside a function but never used\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "function `$FF` is defined inside a function but never used\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-inner-function"
                ]
              }
            },
            {
              "id": "894d7b0a-d02f-37eb-86a5-736af455b465",
              "name": "resources.rules.useless-inner-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-inner-function"
              },
              "fullDescription": {
                "text": "function `$FF` is defined inside a function but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "function `$FF` is defined inside a function but never used\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "function `$FF` is defined inside a function but never used\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-inner-function"
                ]
              }
            },
            {
              "id": "33e8532e-d02e-35fb-acee-c69551cc96cb",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "eedefb1a-3078-3133-b6bc-e00f92bfd1bc",
              "name": "python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces"
              },
              "fullDescription": {
                "text": "Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces",
              "help": {
                "text": "Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces"
                ]
              }
            },
            {
              "id": "37a3dde8-9bba-3d97-beb6-26101689104c",
              "name": "resources.rules.dict-del-while-iterate",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dict-del-while-iterate"
              },
              "fullDescription": {
                "text": "It appears that `$DICT[$KEY]` is a dict with items being deleted while in a for loop. This is usually a bad idea and will likely lead to a RuntimeError: dictionary changed size during iteration"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "It appears that `$DICT[$KEY]` is a dict with items being deleted while in a for loop. This is usually a bad idea and will likely lead to a RuntimeError: dictionary changed size during iteration\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "It appears that `$DICT[$KEY]` is a dict with items being deleted while in a for loop. This is usually a bad idea and will likely lead to a RuntimeError: dictionary changed size during iteration\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects](https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dict-del-while-iterate"
                ]
              }
            },
            {
              "id": "32c8a31b-5ffa-3324-baf4-2311f6d91ee7",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "0d0cdf93-b515-3db2-ad85-d274299693a1",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "3daa7272-f85f-38f7-bcac-ca0403f2a52e",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "19dc4f8c-a975-3812-81db-cd085faef2b2",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "f1227fbc-cbe0-3041-85f6-c3a663454fb8",
              "name": "resources.rules.missing-ratelimit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-ratelimit"
              },
              "fullDescription": {
                "text": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/jsocol/django-ratelimit/blob/main/docs/index.rst#quickstart](https://github.com/jsocol/django-ratelimit/blob/main/docs/index.rst#quickstart)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-ratelimit"
                ]
              }
            },
            {
              "id": "542d553c-2e3e-39be-9dc5-ff44f986337f",
              "name": "resources.rules.missing-ratelimit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-ratelimit"
              },
              "fullDescription": {
                "text": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/jsocol/django-ratelimit/blob/main/docs/index.rst#quickstart](https://github.com/jsocol/django-ratelimit/blob/main/docs/index.rst#quickstart)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-ratelimit"
                ]
              }
            },
            {
              "id": "9ab9e489-657c-3d09-897f-84fa864f3e5e",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "86b4d35a-d07b-3b36-a677-b329c598fb71",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "3532f127-a13f-343c-8504-2ec608b57b74",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "dcd5c4e9-72e5-3d29-be53-0409564a2040",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "59e6766b-9ad3-3d84-9d7c-403333ad09ca",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "cebe4188-dfe3-322c-a24a-90ada53fdb30",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "24feed3d-58e2-3fdf-b185-f7801f2003de",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "3ad9f242-3afc-34af-8512-69eac51dccf5",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "686307b3-d90e-3b11-9e80-34ef6ff6f636",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "33ab4ebe-50e2-338b-9f95-19f1dffb026b",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "5636bbd8-5f3d-3faf-a479-97b309dd3846",
              "name": "python.lang.security.audit.non-literal-import.non-literal-import",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.non-literal-import.non-literal-import"
              },
              "fullDescription": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import",
              "help": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.non-literal-import.non-literal-import"
                ]
              }
            },
            {
              "id": "a2bac368-40b9-35de-994e-1eb05c1218f4",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "7f91130c-3f33-35b0-b8e3-cd21ef578344",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "a7c1d00a-c92f-3ccd-8066-3156e6bed679",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "8a0e6a2c-5e79-3a4e-aede-39c4b223cf6a",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "ad049d59-99ec-32b3-a5ce-65e1737de35f",
              "name": "resources.rules.pdb-remove",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.pdb-remove"
              },
              "fullDescription": {
                "text": "pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.pdb-remove"
                ]
              }
            },
            {
              "id": "f15253a3-64f7-33cf-b6c0-85ee754fe174",
              "name": "resources.rules.pdb-remove",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.pdb-remove"
              },
              "fullDescription": {
                "text": "pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.pdb-remove"
                ]
              }
            },
            {
              "id": "b9826f4a-9b25-3c86-8ef4-8058b9ecca9d",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "0cebb3c3-493b-38bf-927c-fec0dd548b4c",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "ce644ded-f5f8-397e-85c0-1a3a677b8687",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "9088bef2-0797-3123-9822-08a2b7eef4e4",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "7e9758a6-3b29-34e8-892c-7a65e0bffac3",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "520c5614-a8c5-3e21-a79a-09c29a380108",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "d28ee907-1b15-3c50-91cf-f8a74afdb708",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "64c47577-0b2e-32c6-ade6-cbfe07d371df",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "8b777b8b-4e66-3ed8-b9fb-48203bb245da",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "ad7e35ef-769a-3154-9e6d-61ebb9036dea",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'STARTUPINFO' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/_version.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 23,
                  "endLine": 97,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        startupinfo = subprocess.STARTUPINFO()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7d1a36f41dab2b99878e43f60af39e5e87620cc0032cc170cf9bad5137a9c2a6ce395bd537ae1a2755de94b2dd7ae7ac0640d05255aa10c5c81b75fd985c8442_0"
          },
          "properties": {}
        },
        {
          "ruleId": "394f290d-f748-3353-b7e3-4e9953ad9565",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"(distributed/.*test.*)::([^ ]*)\"\n        r\"( (.*)(PASSED|FAILED|ERROR|SKIPPED|XFAIL|RERUN|LEAKED).*| )$\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "continuous_integration/scripts/parse_stdout.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 13,
                  "endLine": 35,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    match = re.compile(\n        r\"(distributed/.*test.*)::([^ ]*)\"\n        r\"( (.*)(PASSED|FAILED|ERROR|SKIPPED|XFAIL|RERUN|LEAKED).*| )$\"\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b7d50bed28676db6f9f1a9fefe1c8da529194d2adaa4710da6dfd678374c1a192e87ab7d4a534d947cff785e623414c5993daef322a2fa5c03ea8c7e6b2b2854_0"
          },
          "properties": {}
        },
        {
          "ruleId": "0f72025d-8a99-319d-b990-b321489f9f85",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "key `\"suite_name\"` in `df_jobs` is assigned twice; the first assignment is useless"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "continuous_integration/scripts/test_report.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 9,
                  "endLine": 165,
                  "endColumn": 74,
                  "snippet": {
                    "text": "        df_jobs[\"suite_name\"] = name_components.iloc[:, 0].str.cat(\n            name_components.iloc[:, 1:], sep=\"-\"\n        )\n        df_jobs[\"suite_name\"] = df_jobs.suite_name.str.replace(\"--\", \"-\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0718e5b2de1ffa5f14ae245a656e0725f5379c98987e1c314b446f4921cd35887fc2f2ff25bc1c23663aab2d8e01c12870c31023e38ff83127e7a33d7d56b997_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a155ab58-a05f-37da-a7a0-52cbc5919f90",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'<([^>]*)>;\\s*rel=\"([\\w]*)\\\"'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "continuous_integration/scripts/test_report.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 18,
                  "endLine": 112,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    link_regex = re.compile(r'<([^>]*)>;\\s*rel=\"([\\w]*)\\\"')"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9cde2ea05067db90bb1582317c731f67795698b851e053e4529e8de44d1ce1e5c6f55d195c45bcfde63a0da6516c3a259684f3ab85cbf853427501db9368bd77_0"
          },
          "properties": {}
        },
        {
          "ruleId": "31a1b6fa-5c64-3d92-8afe-b94f9f0196ac",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'Popen' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/_version.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 23,
                  "endLine": 112,
                  "endColumn": 14,
                  "snippet": {
                    "text": "            process = subprocess.Popen(\n                [command] + args,\n                cwd=cwd,\n                env=env,\n                stdout=subprocess.PIPE,\n                stderr=(subprocess.PIPE if hide_stderr else None),\n                **popen_kwargs,\n            )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8c8b1c232d55750f6a9de4caf2b494647af36e3df8de37a2490bd793f18751f962a3218bc00a661116c0b955bbd889c0ad4631b3531e7ee2a9bc9676aefa7500_0"
          },
          "properties": {}
        },
        {
          "ruleId": "2a31d592-a81e-3daa-9417-1a2279d36e87",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'=\\s*\"(.*)\"'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/_version.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 26,
                  "endLine": 180,
                  "endColumn": 56,
                  "snippet": {
                    "text": "                    mo = re.search(r'=\\s*\"(.*)\"', line)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "16bd3031efe52441343bd9ebb0ffb25cc66a3c1035de95e2ee3e8dc93e677deb73b22c40fd45ccff188b1e74656f72d0504437ec786249107aa0b61661a3aa83_0"
          },
          "properties": {}
        },
        {
          "ruleId": "fd0e936a-cd04-34cf-a2a5-f1555adcce8c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'=\\s*\"(.*)\"'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/_version.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 26,
                  "endLine": 184,
                  "endColumn": 56,
                  "snippet": {
                    "text": "                    mo = re.search(r'=\\s*\"(.*)\"', line)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "16bd3031efe52441343bd9ebb0ffb25cc66a3c1035de95e2ee3e8dc93e677deb73b22c40fd45ccff188b1e74656f72d0504437ec786249107aa0b61661a3aa83_1"
          },
          "properties": {}
        },
        {
          "ruleId": "e2bd56c7-0f20-3f52-bec9-1d31d49c9eeb",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'=\\s*\"(.*)\"'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/_version.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 26,
                  "endLine": 188,
                  "endColumn": 56,
                  "snippet": {
                    "text": "                    mo = re.search(r'=\\s*\"(.*)\"', line)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "16bd3031efe52441343bd9ebb0ffb25cc66a3c1035de95e2ee3e8dc93e677deb73b22c40fd45ccff188b1e74656f72d0504437ec786249107aa0b61661a3aa83_2"
          },
          "properties": {}
        },
        {
          "ruleId": "dbafc7ae-f97b-345b-9baa-60c98966b4c4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"\\d\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/_version.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 36,
                  "endLine": 236,
                  "endColumn": 55,
                  "snippet": {
                    "text": "        tags = {r for r in refs if re.search(r\"\\d\", r)}"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "fb144c97d16e49197fdd17b8b4283989895eb694dca39e2f17f2aa14dbe82bc7bf5e6c54a4fe6a841022965100ca35bd287fa26fae438cc255ccbee074f40517_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c2fa4e36-7a08-3975-a8b7-9ae32a79cb9d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"\\d\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/_version.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 20,
                  "endLine": 248,
                  "endColumn": 38,
                  "snippet": {
                    "text": "            if not re.match(r\"\\d\", r):"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "fb144c97d16e49197fdd17b8b4283989895eb694dca39e2f17f2aa14dbe82bc7bf5e6c54a4fe6a841022965100ca35bd287fa26fae438cc255ccbee074f40517_1"
          },
          "properties": {}
        },
        {
          "ruleId": "917a6aca-74e2-3789-bcbe-490b4b92ba88",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"^(.+)-(\\d+)-g([0-9a-f]+)$\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/_version.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 373,
                  "startColumn": 14,
                  "endLine": 373,
                  "endColumn": 67,
                  "snippet": {
                    "text": "        mo = re.search(r\"^(.+)-(\\d+)-g([0-9a-f]+)$\", git_describe)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "614de88fa360a4ec13c7e1d58ec30f39378a7798dc412c4bf5ca01c25efcfdeb28fdf6a4c6e5b22f3212eee1a1d760135ec0b6e5b8eb6678b700eec798085166_0"
          },
          "properties": {}
        },
        {
          "ruleId": "74f051ae-064f-3f91-89cc-0cbd4a59811c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "code after return statement will not be executed"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/actor.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 9,
                  "endLine": 267,
                  "endColumn": 14,
                  "snippet": {
                    "text": "        return self._result\n        yield  # type: ignore[unreachable]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "99e54e9a21caab943907ce0611581b279a5e0bc0e78691ea22ce569325ba6ab2decd0fa3a7a99abc01e0e2c4dd6ba1feb8cda8900f2f1f9029eaac3be3adb301_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b4cc4f14-aba3-3652-a991-0ee46b45f89b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\":\\d\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/cli/dask_scheduler.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 42,
                  "endLine": 166,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    if port is None and (not host or not re.search(r\":\\d\", host)):"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9e04f7a2f7df68321a06a5a13279e919a01a9b10b832ae2d71cddc8dcfa20bc1f659c7099e6744e6f94757e5f6ee868d4e060d6fbef1fd99a94468f9debbd1d7_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8877b2b8-0d8d-387c-b982-0701b7afd6df",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/cli/dask_ssh.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 9,
                  "endLine": 168,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        exit(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "551223a162472f1c9bf262682006ceb1e26d2374049da8a536ef00b88600cff3dac7cea3098bcbc2c479777ce997c557d4c31d5c16c0bf3741990e9c82334c5e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b5a5788d-02b8-37b3-9092-c58da3d8e0a1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/client.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 711,
                  "startColumn": 24,
                  "endLine": 711,
                  "endColumn": 53,
                  "snippet": {
                    "text": "            category = pickle.loads(msg[\"category\"])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b4dd9b35e2f0d29e02e534bda67e1ec4f568b3efc2b0624ac807d348f86261e150d7bcde9be1467f4d0331f1a35317bc4d1e38bebb75766a4f850db55e6667e7_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5ecb1f76-96ee-3437-bf39-3148df246087",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/client.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 715,
                  "startColumn": 13,
                  "endLine": 715,
                  "endColumn": 41,
                  "snippet": {
                    "text": "            pickle.loads(msg[\"message\"]),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b4dd9b35e2f0d29e02e534bda67e1ec4f568b3efc2b0624ac807d348f86261e150d7bcde9be1467f4d0331f1a35317bc4d1e38bebb75766a4f850db55e6667e7_1"
          },
          "properties": {}
        },
        {
          "ruleId": "f8310485-56d5-3ada-a4a2-0ae304038057",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Using UUID version 1 for UUID generation can lead to predictable UUIDs based on system information (e.g., MAC address, timestamp). This may lead to security risks such as the sandwich attack. Consider using `uuid.uuid4()` instead for better randomness and security."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/client.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 875,
                  "startColumn": 19,
                  "endLine": 875,
                  "endColumn": 52,
                  "snippet": {
                    "text": "            + str(uuid.uuid1(clock_seq=os.getpid()))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ca2818ba1173ed36759590a9854228b772afac037fe71d4bbfc112c2423c87dcdad6cd658a578d377fbc3eae7c2f540ebaf8b4b91cf5588b52ec97b20beb7a64_0"
          },
          "properties": {}
        },
        {
          "ruleId": "83dec664-e4a9-33c4-8933-6fed81065e3b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\"|\".join([f\"(?:{mod})\" for mod in ignore_modules])` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/client.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3040,
                  "startColumn": 31,
                  "endLine": 3042,
                  "endColumn": 18,
                  "snippet": {
                    "text": "                mod_pattern = re.compile(\n                    \"|\".join([f\"(?:{mod})\" for mod in ignore_modules])\n                )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "259af6758bc4d9dccf0840c7fcf938bc5b06ceef39d376bbda19a8fe01f897f56f2a0f630e8849c5ede154c7fd04be2d6748689b015ebc005ba37892e60da290_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b51dfbf9-b3b1-3839-a7cc-18193c4859be",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\".*[\\\\/](\" + \"|\".join(mod for mod in ignore_files) + r\")([\\\\/]|$)\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/client.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3044,
                  "startColumn": 33,
                  "endLine": 3046,
                  "endColumn": 18,
                  "snippet": {
                    "text": "                fname_pattern = re.compile(\n                    r\".*[\\\\/](\" + \"|\".join(mod for mod in ignore_files) + r\")([\\\\/]|$)\"\n                )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1bcfe55ab1614d30e988e56cb10c95f338e47a3b5db19b864299f70de3ce57d822645925f556c3a75a427abfc6cbdd1c23e746da0a45261cb7cfa396fa0183ed_0"
          },
          "properties": {}
        },
        {
          "ruleId": "cdd4d404-dd54-3f38-a39d-08115cf07436",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Function '__init__' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/comm/ws.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 5,
                  "endLine": 72,
                  "endColumn": 57,
                  "snippet": {
                    "text": "    def __init__(  # type: ignore[no-untyped-def]\n        self,\n        application,\n        request,\n        handler=None,\n        deserialize: bool = True,\n        allow_offload: bool = True,\n        listener=None,\n        **kwargs,\n    ):\n        self.handler = handler\n        self.deserialize = deserialize\n        self.allow_offload = allow_offload\n        self.request = request\n        self.listener = listener()\n        super().__init__(application, request, **kwargs)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c529783055ef8fc96d6015b8d26546ed86b952fb1f348cae1c68a19e6c5e0e33ec3def51b46ddc2ea150cf0808a4b3d81c5321c39cedbbdc7d0c8d87223e8785_0"
          },
          "properties": {}
        },
        {
          "ruleId": "fe4f80b9-ef59-3009-a4b9-29767cce57fa",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/comm/ws.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 15,
                  "endLine": 200,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    prefix = \"ws://\""
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8032a09fc30bf4360463f6f1b95f8be9bbdefd33191a9e07c0cc01314e6287a37b52dfd571544e4b4f1cbc3695d908d612ec79f54cf5eed42458d292021d5630_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8a29db78-2434-3948-933e-1d85181081eb",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/comm/ws.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 15,
                  "endLine": 336,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    prefix = \"ws://\""
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8032a09fc30bf4360463f6f1b95f8be9bbdefd33191a9e07c0cc01314e6287a37b52dfd571544e4b4f1cbc3695d908d612ec79f54cf5eed42458d292021d5630_1"
          },
          "properties": {}
        },
        {
          "ruleId": "0117b943-807f-3785-9027-8e71818f76e8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/comm/ws.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 436,
                  "startColumn": 15,
                  "endLine": 436,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    prefix = \"ws://\""
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8032a09fc30bf4360463f6f1b95f8be9bbdefd33191a9e07c0cc01314e6287a37b52dfd571544e4b4f1cbc3695d908d612ec79f54cf5eed42458d292021d5630_2"
          },
          "properties": {}
        },
        {
          "ruleId": "7966845c-661f-3e97-b6fc-07e294f05980",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/core.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 461,
                  "startColumn": 21,
                  "endLine": 461,
                  "endColumn": 73,
                  "snippet": {
                    "text": "                    return loop is None or loop.asyncio_loop.is_closed()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bb6b8efc46e7980c64a2a8f97763d8bdf5d6ec66fb6c8c520ffb5a2c10a87fc24687c1f93aafe04f48b6ae0b42fc54e17b5b462209ec28540915f21350c24691_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ce896161-f515-3f10-a563-dd6c4556faa8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/core.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1061,
                  "startColumn": 17,
                  "endLine": 1061,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                pdb.set_trace()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7b2552d8fc930493d54ac393d44c453fbc1445d5224af8ef90b78193996a9750ed20823300f44ed865385bc3524c6a6ec904034f2ae13edaf66bba23bd3f2ca2_0"
          },
          "properties": {}
        },
        {
          "ruleId": "7b56724f-cd5b-31a5-8fa7-f76edd9ed266",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found identical comparison using is. Ensure this is what you intended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/core.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1630,
                  "startColumn": 20,
                  "endLine": 1630,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                if reason is None:"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "68566920c8c32a6ca58c3ea27625e909dd16cd8ab15ec268a511e5ed6d4975dd4ecc7a55f2cbf178d77057359292c0c7cdc1e2a3d986519e6657c895ab43a3c4_0"
          },
          "properties": {}
        },
        {
          "ruleId": "08b9b9c0-294a-39e8-8e36-afaa5de3daac",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/dashboard/components/scheduler.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 7,
                  "endLine": 109,
                  "endColumn": 2,
                  "snippet": {
                    "text": "env = Environment(\n    loader=FileSystemLoader(\n        os.path.join(os.path.dirname(__file__), \"..\", \"..\", \"http\", \"templates\")\n    )\n)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "95b0f4a28c52ce17d3cbc6c8562313791da60f66b5636ea667dbcfc7bd0a73fbf057a2834772435aae6820f531f005f9e57d5969df6a327129156b9337c3614b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e9dbb713-c383-397b-9142-aa12f5bf8254",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "key `\"memory_unmanaged_recent\"` in `data` is assigned twice; the first assignment is useless"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/dashboard/components/scheduler.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 4278,
                  "startColumn": 13,
                  "endLine": 4279,
                  "endColumn": 73,
                  "snippet": {
                    "text": "            data[\"memory_unmanaged_recent\"][-1] = minfo.unmanaged_recent\n            data[\"memory_unmanaged_recent\"][-1] = minfo.unmanaged_recent"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9d54231c889cdc56963bd1a2bbb0bcc2a975c5824aed7fb742950a52d54c749785416d8a63ccb6613338bde797014646c4ae147f929ffafb48be2f6b623e3bc2_0"
          },
          "properties": {}
        },
        {
          "ruleId": "404109e8-2510-301d-81a9-25c7efd0ae3e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/dashboard/components/shared.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 44,
                  "endLine": 246,
                  "endColumn": 67,
                  "snippet": {
                    "text": "        self.reset_button.on_click(lambda: self.update(self.state))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bbcc43d709e7b09074088f3260c3bd0ea44baeee2fe8c81258ebb7ea41235a48755f35024b4e578d03f182f4d6b48c76a77280bd7a678f1d658a61cb7835aead_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b75b8e7a-4717-3a0c-8d4d-250d876e4e36",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/dashboard/components/shared.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 388,
                  "startColumn": 44,
                  "endLine": 388,
                  "endColumn": 67,
                  "snippet": {
                    "text": "        self.reset_button.on_click(lambda: self.update(self.state))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f2536c8146be2b059af601a40689776b9300b60f3767e6d8e06b13dee8987562d397f23243f40b4865f8f07e4b326fd6a0856cc127233f3397cb4d60caabd1b5_0"
          },
          "properties": {}
        },
        {
          "ruleId": "3231c16f-4eb4-3562-b1c2-57f668a1e5ac",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/dashboard/components/worker.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 7,
                  "endLine": 43,
                  "endColumn": 2,
                  "snippet": {
                    "text": "env = Environment(\n    loader=FileSystemLoader(\n        os.path.join(os.path.dirname(__file__), \"..\", \"..\", \"http\", \"templates\")\n    )\n)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b98bc097aba6781e153d7348f9e73a34e00120943e709d523bcf930dbc04d3042d149dc9b7d497b5845d0f1c196c6baabfc86fc2d8b3586726e5fbdc5b8fabd0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "18ccd8fe-311a-3fe1-b6e6-c71b91a4e4e6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) youâ€™re telling the browser to fetch in the 'integrity' attribute for all externally hosted files."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/dashboard/templates/performance_report.html",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 5,
                  "endColumn": 95,
                  "snippet": {
                    "text": "<link rel=\"shortcut icon\" href=\"https://docs.dask.org/en/latest/_static/images/favicon.ico\" />"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1033f25bf91e2a3dd01e96d00d1d2578a49342e6b3a98665047914bac1e5d4cf04b920a6594831dcd23f93edbe726e740fd905839b68a216e97449aa7b183571_0"
          },
          "properties": {}
        },
        {
          "ruleId": "273ef698-8942-32d0-9361-1da08e1673fc",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/deploy/adaptive.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 17,
                  "endLine": 183,
                  "endColumn": 46,
                  "snippet": {
                    "text": "            key=pickle.dumps(self.worker_key) if self.worker_key else None,"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0162c0109369727f53e09dd4c8c638b3a4871db5de149c715a6066c9721ccc6e5028592abf6eb215507c442137950d78b962cf01fb87ee2a7eafb65ce58e7a72_0"
          },
          "properties": {}
        },
        {
          "ruleId": "63d18436-e9a6-30bd-a36b-367b3e7d4188",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "code after return statement will not be executed"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/deploy/cluster.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 541,
                  "startColumn": 9,
                  "endLine": 542,
                  "endColumn": 14,
                  "snippet": {
                    "text": "        return self\n        yield"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7cfede099729dbb37129475c753efff13413f565aa7bdb2594cdbf2286c526e3c185feeb0854ad98a7f21fbe7c194e6dc786d52e00b2299203766f0572054b65_0"
          },
          "properties": {}
        },
        {
          "ruleId": "1cc6a140-d2f8-38d1-834c-16eb593df44d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/deploy/old_ssh.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 13,
                  "endLine": 106,
                  "endColumn": 21,
                  "snippet": {
                    "text": "            sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9b1a5a5c69f925e6fc6721be3f7d7a7cc2a73a7d4eca0048886032b66e18efb17d4a53e4dbdbb6325545c491f99ee3cc3c99f90d5389d26c2938b19fa6378d38_0"
          },
          "properties": {}
        },
        {
          "ruleId": "6aa0a486-f6dd-30eb-8b91-46ea569c23cf",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/deploy/old_ssh.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 9,
                  "endLine": 189,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        sleep(1.0)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a39cea31fec01e900a17c0e4c0c1ddd131205bb41bd3d392e9fa9c11f0913ce07d5a634ef3265f44064e05d19f77bee70a727f7398856a964c00a69a218231e8_0"
          },
          "properties": {}
        },
        {
          "ruleId": "cd454562-e8ee-3e3b-b294-eced86e64810",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/deploy/old_ssh.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 9,
                  "endLine": 201,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        sleep(1.0)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a39cea31fec01e900a17c0e4c0c1ddd131205bb41bd3d392e9fa9c11f0913ce07d5a634ef3265f44064e05d19f77bee70a727f7398856a964c00a69a218231e8_1"
          },
          "properties": {}
        },
        {
          "ruleId": "f5119235-cc97-3b56-b164-31a3df8fa5e7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/deploy/old_ssh.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 469,
                  "startColumn": 17,
                  "endLine": 469,
                  "endColumn": 27,
                  "snippet": {
                    "text": "                sleep(0.1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "18475f47fe559c114b4851f627a3facf69d5725ff3db2be919101c9f5301d38ffa6f8e15d40f635f81cba55166ed60168c0e4e86c40984f8c774d09b7ea04869_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ed4865ea-c5b6-38b4-8ad7-5cca47ed17a0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected 'create_subprocess_exec' function without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/deploy/subprocess.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 30,
                  "endLine": 97,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        self.process = await asyncio.create_subprocess_exec(\n            *cmd,\n            stderr=asyncio.subprocess.PIPE,\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "eb03f7f58ef6394f0026b7702e4a0f7c74a48e947406eb5c98d03e5caf04ff3f5129580fbe29a5008b9a1128adcaa61440dea1825122dc642416809a4a0ec56d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "7fb11ab8-45f8-3afb-9ab2-35e56e85bce2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected 'create_subprocess_exec' function without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/deploy/subprocess.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 30,
                  "endLine": 163,
                  "endColumn": 66,
                  "snippet": {
                    "text": "        self.process = await asyncio.create_subprocess_exec(*cmd)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "eb03f7f58ef6394f0026b7702e4a0f7c74a48e947406eb5c98d03e5caf04ff3f5129580fbe29a5008b9a1128adcaa61440dea1825122dc642416809a4a0ec56d_1"
          },
          "properties": {}
        },
        {
          "ruleId": "5753c95e-b6aa-395c-91ef-ea8b6289d52c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/diagnostics/memray.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 5,
                  "endLine": 146,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    time.sleep(0.1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1e4247fe6e62a724eded95d45ed1aa03c55a531fb090754dee5ee622e88c622d62d3de937464a845414c9492e9bd35765133d50a64484b31fb361ed0139927de_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5eb21bbb-701e-398a-84a4-d7249f2e9c9a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'run' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/diagnostics/memray.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 5,
                  "endLine": 65,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    subprocess.run(report_args)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2dc3e9693a87f3b046dc997929f3c541ac07701d07b50b487c3102e356219aafc460f1d58e0bc8c122614d17e392c39ae1a308e63d38af68ffc65e59b084b630_0"
          },
          "properties": {}
        },
        {
          "ruleId": "9b98468c-28b9-3c1a-83bb-0782124e6a9d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/diagnostics/memray.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 5,
                  "endLine": 228,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    time.sleep(0.1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1e4247fe6e62a724eded95d45ed1aa03c55a531fb090754dee5ee622e88c622d62d3de937464a845414c9492e9bd35765133d50a64484b31fb361ed0139927de_1"
          },
          "properties": {}
        },
        {
          "ruleId": "3984ce85-22f9-3c45-acdd-d0be11149ff0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found identical comparison using is. Ensure this is what you intended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/diagnostics/nvml.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 8,
                  "endLine": 48,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    if pynvml is None"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3dd909186a15abfa13b360bb47d3df13da38ac99e924f8ba14a74a12b9c147f2fa4c1e23e22bf295a59628c25360e92363b00d39ef01d6f87fd207eeb9c7c3c8_0"
          },
          "properties": {}
        },
        {
          "ruleId": "257ae9e7-5ae5-31a5-8d2f-c457a0861a2d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/diagnostics/progress.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 42,
                  "endLine": 300,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        self.state = defaultdict(lambda: defaultdict(set))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2ed3d196d5dc932e0873be64973ccdd369a84776add573b7e5173ed25d96df1b5483c53de450ef08d4e16e2b95a9bf9785180256c9bccea1f181399a9d980279_0"
          },
          "properties": {}
        },
        {
          "ruleId": "21111eb0-a695-3ac3-a082-d9ff25247731",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'Popen' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/diagnostics/plugin.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 740,
                  "startColumn": 20,
                  "endLine": 752,
                  "endColumn": 14,
                  "snippet": {
                    "text": "            proc = subprocess.Popen(\n                [\n                    sys.executable,\n                    \"-m\",\n                    \"pip\",\n                    \"install\",\n                    *self.pip_options,\n                    \"-r\",\n                    f.name,\n                ],\n                stdout=subprocess.PIPE,\n                stderr=subprocess.PIPE,\n            )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "532aa919e0254838d281d6c4c143e3ad8b39658034a2acdfa4e4b2937d3f26e9f1ac94292ed76e513480d9bd82eaee98bbf7dc28d3c3f55976a352e782031c09_0"
          },
          "properties": {}
        },
        {
          "ruleId": "262b38b3-5225-36c6-80c3-1c13766666a3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/diagnostics/progressbar.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 381,
                  "startColumn": 17,
                  "endLine": 383,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                '<div style=\"padding: 0px 10px 0px 10px;'\n                \" text-align:left; word-wrap: \"\n                'break-word;\">' + make_label(key) + \"</div>\""
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8971c4a489c69049840ce4f0a601235414943c886e3b5da826adaef350920f92b1c9f15f1b3829205c61e7b0f61e4df1100a6e5fb039a3808002436e9594c549_0"
          },
          "properties": {}
        },
        {
          "ruleId": "40a5e99a-42ba-3aa5-8ce7-c3c08b234e58",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found identical comparison using is. Ensure this is what you intended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/diagnostics/rmm.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 8,
                  "endLine": 37,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    if rmm is None:"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "91503d2548b888be1257c4848accfbe6c4fa9cad6ab6d976e52c38307edcf15b559e6bfbe0f99a1e9c5c998adce1f5890734baf09b8ecc6ef89a6e2bc934a6d5_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ac3c09ec-12cd-3ae6-87a6-bf90a9453460",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/http/prometheus.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 14,
                  "endLine": 42,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    module = import_module(module_name)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "01dd8c94fff733c3b656187f4414433dbd8e45e2249434a2c667e5e1f674502cd8a0fb87145f3b14fd6468bf1103eb959b552a839546bcd9b288219cd4f0bf0b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8a485a59-4a98-3356-8072-5cf0bad037f0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Function 'find_handler' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/http/routing.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 5,
                  "endLine": 66,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    def find_handler(  # type: ignore[no-untyped-def]\n        self, request: tornado.httputil.HTTPServerRequest, **kwargs\n    ):\n        handler = super().find_handler(request, **kwargs)\n        if handler and not issubclass(handler.handler_class, web.ErrorHandler):\n            return handler\n        else:\n            for app in self.applications:\n                handler = app.find_handler(request, **kwargs) or handler\n                if handler and not issubclass(handler.handler_class, web.ErrorHandler):\n                    break\n            return handler"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4b01ff83aa29d0e40f7dc49634b9c50d95aa23ae53796990e63b805637250b48a40280c043ed9dbc1241c69f33d900c3556a31eee6368f5d11e8f66b53c1d1f8_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d707fceb-8935-30a2-b869-42e68575cc7c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected a template variable used in an anchor tag with\nthe 'href' attribute. This allows a malicious actor to\ninput the 'javascript:' URI and is subject to cross-\nsite scripting (XSS) attacks. Use the 'url' template tag\nto safely generate a URL. You may also consider setting\nthe Content Security Policy (CSP) header.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/http/templates/base.html",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 58,
                  "snippet": {
                    "text": "                <a href=\"{{ page }}\">{{ page|title }}</a>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8f6e518ac246016a451850a29716f1ec64b73d79c8c3076a218969d496b0fa6320a8c5b7413600307759b6443618c2bdc78e9a94eb66d48e59f46f9a32cc7f34_0"
          },
          "properties": {}
        },
        {
          "ruleId": "07d3fafd-ec12-3643-aa3f-457bac19d47b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This anchor tag with 'target=\"_blank\"' is missing 'noopener'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noopener' on this tag"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/http/templates/base.html",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 17,
                  "endLine": 53,
                  "endColumn": 76,
                  "snippet": {
                    "text": "                <a href=\"https://docs.dask.org/en/stable/\" target=\"_blank\">Documentation</a>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "98cfa450128b640f4e173409d0b8867a4b5ee503e7d1e0574ab405a92523dc5260bf2ce39c3ebd380e0407613c64ad60666e20580a098ae9231eeb3f8d36f08b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ebd034b3-9245-3d19-874c-a84f91ca9c4c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected a template variable used in an anchor tag with\nthe 'href' attribute. This allows a malicious actor to\ninput the 'javascript:' URI and is subject to cross-\nsite scripting (XSS) attacks. Use the 'url' template tag\nto safely generate a URL. You may also consider setting\nthe Content Security Policy (CSP) header.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/http/templates/json-index.html",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 1,
                  "endLine": 7,
                  "endColumn": 45,
                  "snippet": {
                    "text": "      <li><a href=\"{{url}}\">{{url}}</a></li>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "30ae1a5f089ec779efd04e733eb207e2266d95adbd58189d76ca88c6aaaa0b588309e96b91c5da0ee017a8740d39e95ee7eb9979aa6c66f8a7b106f2d8ba09f4_0"
          },
          "properties": {}
        },
        {
          "ruleId": "9672d329-005c-3d5e-8680-71d1da538dec",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This anchor tag with 'target=\"_blank\"' is missing 'noopener'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noopener' on this tag"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/http/templates/base.html",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 17,
                  "endLine": 57,
                  "endColumn": 76,
                  "snippet": {
                    "text": "                <a class=\"jupyter-link\" href=\"jupyter/lab\" target=\"_blank\">"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "98cfa450128b640f4e173409d0b8867a4b5ee503e7d1e0574ab405a92523dc5260bf2ce39c3ebd380e0407613c64ad60666e20580a098ae9231eeb3f8d36f08b_1"
          },
          "properties": {}
        },
        {
          "ruleId": "352d12f9-cece-3040-a82d-eb31b5c1b6d1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) youâ€™re telling the browser to fetch in the 'integrity' attribute for all externally hosted files."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/http/templates/main.html",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 3,
                  "endLine": 7,
                  "endColumn": 116,
                  "snippet": {
                    "text": "  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.6.0/css/bulma.min.css\" media=\"all\" />"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0281e8758818532376100a0a8aa50046b591a734b8614067773f6d788c2c26842eec84324fd6360e0cac9e2b87b20ee37db889e8badc63b9dc99986e67ed9943_0"
          },
          "properties": {}
        },
        {
          "ruleId": "0adb3eb5-f93c-3bac-b5f6-df66fbccd6ee",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected a template variable used in an anchor tag with\nthe 'href' attribute. This allows a malicious actor to\ninput the 'javascript:' URI and is subject to cross-\nsite scripting (XSS) attacks. Use the 'url' template tag\nto safely generate a URL. You may also consider setting\nthe Content Security Policy (CSP) header.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/http/templates/main.html",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 8,
                  "endColumn": 87,
                  "snippet": {
                    "text": "  <link rel=\"stylesheet\" href=\"{{ rel_path_statics }}/statics/css/sortable.min.css\" />"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ae10f288098401789cd6dd8ee166027b7854d545870ff759a3f5d7540b3a547e5825fcd3c43b3fa4c474ed76fd671f74925a15595a22fa38215664ad087d6c6a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a1e63aa5-7069-391f-83d0-253dd365ea06",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected a template variable used in an anchor tag with\nthe 'href' attribute. This allows a malicious actor to\ninput the 'javascript:' URI and is subject to cross-\nsite scripting (XSS) attacks. Use the 'url' template tag\nto safely generate a URL. You may also consider setting\nthe Content Security Policy (CSP) header.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/http/templates/main.html",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 1,
                  "endLine": 9,
                  "endColumn": 88,
                  "snippet": {
                    "text": "  <link rel=\"shortcut icon\" href=\"{{ rel_path_statics }}/statics/images/favicon.ico\" />"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ae10f288098401789cd6dd8ee166027b7854d545870ff759a3f5d7540b3a547e5825fcd3c43b3fa4c474ed76fd671f74925a15595a22fa38215664ad087d6c6a_1"
          },
          "properties": {}
        },
        {
          "ruleId": "ac674014-8768-374b-a7ab-5bf98a046f04",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected a template variable used in an anchor tag with\nthe 'href' attribute. This allows a malicious actor to\ninput the 'javascript:' URI and is subject to cross-\nsite scripting (XSS) attacks. Use the 'url' template tag\nto safely generate a URL. You may also consider setting\nthe Content Security Policy (CSP) header.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/http/templates/task.html",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 86,
                  "snippet": {
                    "text": "              <td><a href=\"{{ url_escape(str(dts.key)) }}.html\">{{dts.key}}</a> </td>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b609b082f2f5ce3ca349f8e305efda534bf4d0b0eac5f15eeef382c84fff51a5b81a44d411fcb2a30f6acee0a2d34f832b7fec4b06ecc61d80702602de35c3fb_0"
          },
          "properties": {}
        },
        {
          "ruleId": "dc97d0c3-e4ae-3278-85bd-c22bb9926645",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected a template variable used in an anchor tag with\nthe 'href' attribute. This allows a malicious actor to\ninput the 'javascript:' URI and is subject to cross-\nsite scripting (XSS) attacks. Use the 'url' template tag\nto safely generate a URL. You may also consider setting\nthe Content Security Policy (CSP) header.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/http/templates/task.html",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 1,
                  "endLine": 82,
                  "endColumn": 85,
                  "snippet": {
                    "text": "            <td> <a href=\"{{ url_escape(str(dts.key)) }}.html\">{{dts.key}}</a> </td>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b609b082f2f5ce3ca349f8e305efda534bf4d0b0eac5f15eeef382c84fff51a5b81a44d411fcb2a30f6acee0a2d34f832b7fec4b06ecc61d80702602de35c3fb_1"
          },
          "properties": {}
        },
        {
          "ruleId": "370f4764-6151-3567-8158-11a6945246db",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected a template variable used in an anchor tag with\nthe 'href' attribute. This allows a malicious actor to\ninput the 'javascript:' URI and is subject to cross-\nsite scripting (XSS) attacks. Use the 'url' template tag\nto safely generate a URL. You may also consider setting\nthe Content Security Policy (CSP) header.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/http/templates/task.html",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 1,
                  "endLine": 98,
                  "endColumn": 85,
                  "snippet": {
                    "text": "            <td> <a href=\"{{ url_escape(str(dts.key)) }}.html\">{{dts.key}}</a> </td>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b609b082f2f5ce3ca349f8e305efda534bf4d0b0eac5f15eeef382c84fff51a5b81a44d411fcb2a30f6acee0a2d34f832b7fec4b06ecc61d80702602de35c3fb_2"
          },
          "properties": {}
        },
        {
          "ruleId": "3c9b9dd2-7627-3b2a-b28d-8e10804450af",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected a template variable used in an anchor tag with\nthe 'href' attribute. This allows a malicious actor to\ninput the 'javascript:' URI and is subject to cross-\nsite scripting (XSS) attacks. Use the 'url' template tag\nto safely generate a URL. You may also consider setting\nthe Content Security Policy (CSP) header.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/http/templates/task.html",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 1,
                  "endLine": 146,
                  "endColumn": 83,
                  "snippet": {
                    "text": "                  <td> <a href=\"{{ url_escape(str(key)) }}.html\">{{key}}</a> </td>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b609b082f2f5ce3ca349f8e305efda534bf4d0b0eac5f15eeef382c84fff51a5b81a44d411fcb2a30f6acee0a2d34f832b7fec4b06ecc61d80702602de35c3fb_3"
          },
          "properties": {}
        },
        {
          "ruleId": "749d296f-9396-3095-8d09-dc0acaf85f3c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected a template variable used in an anchor tag with\nthe 'href' attribute. This allows a malicious actor to\ninput the 'javascript:' URI and is subject to cross-\nsite scripting (XSS) attacks. Use the 'url' template tag\nto safely generate a URL. You may also consider setting\nthe Content Security Policy (CSP) header.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/http/templates/task.html",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 1,
                  "endLine": 160,
                  "endColumn": 85,
                  "snippet": {
                    "text": "                  <td> <a href=\"{{ url_escape(str(key2)) }}.html\">{{key2}}</a> </td>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b609b082f2f5ce3ca349f8e305efda534bf4d0b0eac5f15eeef382c84fff51a5b81a44d411fcb2a30f6acee0a2d34f832b7fec4b06ecc61d80702602de35c3fb_4"
          },
          "properties": {}
        },
        {
          "ruleId": "2eca56c7-9d63-313e-9052-52babdc1939e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/http/utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 18,
                  "endLine": 40,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        module = importlib.import_module(module_name)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c3afaddaf258af3ecbac29359d89807289788df0d6c2e4e9eecc004e35c51e3267ef8a773f682e9f95e0d6de8c70d711badb84f1cf4eeaf0a0f0c2faee719ebc_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d3dad5e4-922b-3a7b-a074-08795c4b57f0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/nanny.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 464,
                  "startColumn": 22,
                  "endLine": 464,
                  "endColumn": 42,
                  "snippet": {
                    "text": "            plugin = pickle.loads(plugin)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "929bda8802f2c71a2fdde185c7962385df163ee936b5eeabbd778854b882536e48bd7cd13ea6497883c88209befdd16146e264ad8e3e64c8269e174671149e3c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "541c0267-1560-3570-9973-1ec87ebe118b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function `close_stop_q` is defined inside a function but never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/nanny.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 995,
                  "startColumn": 13,
                  "endLine": 1006,
                  "endColumn": 43,
                  "snippet": {
                    "text": "            @stack.callback\n            def close_stop_q() -> None:\n                try:\n                    child_stop_q.put({\"op\": \"stop\"})  # usually redundant\n                except ValueError:\n                    pass\n\n                try:\n                    child_stop_q.close()  # usually redundant\n                except ValueError:\n                    pass\n                child_stop_q.join_thread()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "58eec9a6757dab9449b084ed2b21120dea6b61f6d1ec04f840acfbab351a787e696108d01d10b07185ea6537b59e8171e81630ac0196065b7c03e4ae50bf2988_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f1538fcf-736e-3b20-ba75-2d4ccca7c4d0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/preloading.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 13,
                  "endLine": 115,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            import_module(name)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2afc306025029154b9755e07b75bfa12b299f9aed6821f623c87c4aad8a0b147008f223b03a38973681ecb80b3020dec1728b5389a3683de0cb412b77b7f446c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f0215efc-aa71-38bf-94d0-97cf1dd89694",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The Python 'compile' function is not secure against maliciously constructed input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/preloading.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 16,
                  "endLine": 148,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    compiled = compile(source, url, \"exec\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7840d4fdc7f2ce2b383b1cce708e4794124d7f2e93e231f905a9d8dee4f19b4ff1cc4c0d53230ee5a22d77a2231a1bdb51fdf3be29076da1ecfa5dc51a9272fa_0"
          },
          "properties": {}
        },
        {
          "ruleId": "fc6e1211-1de0-3c1e-a5e7-d584218cc4ed",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/preloading.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 5,
                  "endLine": 150,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    exec(compiled, module.__dict__)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "11c25395aa8f6235d83316c02bfaa8077f2d8a43979f523fa7935d81b3e13d08ebe79a694fa5b8320be53f52b18f9b5cbea17b3ea61bb4b309e0cc08e0592114_0"
          },
          "properties": {}
        },
        {
          "ruleId": "14607a34-f9e2-3dfb-b353-0a9456cde12c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\"IOLoop is clos(ed|ing)\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/process.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 16,
                  "endLine": 37,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        if not re.search(\"IOLoop is clos(ed|ing)\", str(exc)):"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9c1c763d59987e1c74628a81767e79167ae0dbf01318de2625fc76b90ef1456d348a248d30beaa4a374da2aa2a8c7c91e0856a84d48f9c8c97656c9942ad7401_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f8be17ac-f055-3207-bff9-7188b8108b8b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/profile.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 368,
                  "startColumn": 9,
                  "endLine": 368,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        sleep(interval)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6c774f8caf1b0ceb3398225342acccfe33a2d8a433f8134518e1649715a4ffa31ae587a471041020c761688cd9d494fcf7a1d7943bad9948c9e81723bc80ce14_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8b28a236-749d-32b4-b116-318ed5596334",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/protocol/core.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 36,
                  "endLine": 86,
                  "endColumn": 22,
                  "snippet": {
                    "text": "                    \"pickled-obj\": pickle.dumps(\n                        obj.data,\n                        # In to support len() and slicing, we convert `PickleBuffer`\n                        # objects to memoryviews of bytes.\n                        buffer_callback=lambda x: sub_frames.append(\n                            ensure_memoryview(x)\n                        ),\n                    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8cf92600d479363c900e3324707111e3445b6d2161ed6c5e53e5f7fb0456bbf825c1e1e50eed3b3ccd80d11c6740abb8a97cc93d7a95e59a0a660b9906943392_0"
          },
          "properties": {}
        },
        {
          "ruleId": "1abecc3e-a081-3227-b45b-30d42c057fa0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/protocol/core.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 24,
                  "endLine": 172,
                  "endColumn": 83,
                  "snippet": {
                    "text": "                return pickle.loads(sub_header[\"pickled-obj\"], buffers=sub_frames)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7e319fbc918b018de34c23c235b264d0f762e82f3a95a3d1de122d344ff6819f4eae5bdedf347af1c8c1a3e7ac983a98a10e35c600b65974431e734b943dacbf_0"
          },
          "properties": {}
        },
        {
          "ruleId": "dec06548-f03e-3b27-81dd-42b3be977fac",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/protocol/cuda.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 28,
                  "endLine": 26,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        \"type-serialized\": pickle.dumps(type(x)),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "105c44d622b5375aad581144f76a96815fe55ce0a691e134d23d26dc8fb645c96bd0f0895ce6e662eb30b065fdc097bfa5c38afa7354f0445a4d7b2f03349350_0"
          },
          "properties": {}
        },
        {
          "ruleId": "3624918b-31c7-34df-897b-72e64accbc23",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/protocol/cuda.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 11,
                  "endLine": 34,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    typ = pickle.loads(header[\"type-serialized\"])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bcdd04458df0394545fa46b14abc4c0d8ff31ae57eaf60d00ea9209f3f26c3afa0efa9b414bb572f3e3484764a82a6d87f9043c7a9130103db82e4d83a782c24_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c0c48bc6-d5c7-32a4-97fc-0d3377c655d6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/protocol/numpy.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 21,
                  "endLine": 49,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        frames[0] = pickle.dumps(\n            x,\n            buffer_callback=buffer_callback,\n            protocol=(context or {}).get(\"pickle-protocol\", None),\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e630bdd7a8a2a7a0b606aeeb6a4f3d1eceac0c29e7aa0dd0ad154ff5f449e5240f11917b14e92b6e26e2d66cdda5341e1b46b601e1b14f5d53551b8acbfeb1ba_0"
          },
          "properties": {}
        },
        {
          "ruleId": "78cd7e31-c9ba-3a5b-8b54-06d03313fc7c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/protocol/numpy.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 13,
                  "endLine": 65,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            pickle.loads(dt[1])  # does it unpickle fine?"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ebf9450f53644284169281e02bab52886334d85e19b9579b39a6801d951e0e81feb73c9f83223a4c3d95dab5e25352d553e9c5c1c93b99a68ccf6a8440c91af0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "fddb712d-d48e-3e15-bdca-b5ec3ee4ab73",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/protocol/numpy.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 16,
                  "endLine": 131,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        return pickle.loads(frames[0], buffers=frames[1:])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ebf9450f53644284169281e02bab52886334d85e19b9579b39a6801d951e0e81feb73c9f83223a4c3d95dab5e25352d553e9c5c1c93b99a68ccf6a8440c91af0_1"
          },
          "properties": {}
        },
        {
          "ruleId": "3f7a9da4-bb88-3a01-ab4b-bad08f9acde0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/protocol/numpy.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 14,
                  "endLine": 138,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        dt = pickle.loads(dt)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ebf9450f53644284169281e02bab52886334d85e19b9579b39a6801d951e0e81feb73c9f83223a4c3d95dab5e25352d553e9c5c1c93b99a68ccf6a8440c91af0_2"
          },
          "properties": {}
        },
        {
          "ruleId": "6c150d0f-9200-357d-bf8c-698a6688167c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/protocol/numpy.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 13,
                  "endLine": 195,
                  "endColumn": 14,
                  "snippet": {
                    "text": "            pickle.dumps(\n                x.fill_value, protocol=(context or {}).get(\"pickle-protocol\", None)\n            ),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e630bdd7a8a2a7a0b606aeeb6a4f3d1eceac0c29e7aa0dd0ad154ff5f449e5240f11917b14e92b6e26e2d66cdda5341e1b46b601e1b14f5d53551b8acbfeb1ba_1"
          },
          "properties": {}
        },
        {
          "ruleId": "cf251c26-b58a-369b-99a4-2a20ed5db4b7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/protocol/numpy.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 22,
                  "endLine": 217,
                  "endColumn": 46,
                  "snippet": {
                    "text": "        fill_value = pickle.loads(fill_value)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ebf9450f53644284169281e02bab52886334d85e19b9579b39a6801d951e0e81feb73c9f83223a4c3d95dab5e25352d553e9c5c1c93b99a68ccf6a8440c91af0_3"
          },
          "properties": {}
        },
        {
          "ruleId": "9ff24156-ec45-3498-8dce-203214a1af00",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/protocol/pickle.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 22,
                  "endLine": 63,
                  "endColumn": 52,
                  "snippet": {
                    "text": "            result = pickle.dumps(x, **dump_kwargs)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f1855d08f425a8c2f179c2431271bec5b56403668f20f96bfcd5c9dd8e84041bad9233d1c7b53a5b7a9990f4835525c084b3bc623ad7d07fc807f800bf7b9456_0"
          },
          "properties": {}
        },
        {
          "ruleId": "544461a5-5260-33fc-8b3c-ce5490bab963",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/protocol/pickle.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 20,
                  "endLine": 96,
                  "endColumn": 35,
                  "snippet": {
                    "text": "            return pickle.loads(x)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "95a08d2f6ab85e8ca43e9645cb9504d9a707605f33e2409d352490b812e8e02f8c5785936a0f4c980978a585cbfb29caedfdde69a2a27e2f76b97676289e8a33_1"
          },
          "properties": {}
        },
        {
          "ruleId": "a4c96d07-164b-358a-b009-10bfb6a97a11",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/protocol/pickle.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 20,
                  "endLine": 94,
                  "endColumn": 52,
                  "snippet": {
                    "text": "            return pickle.loads(x, buffers=buffers)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "95a08d2f6ab85e8ca43e9645cb9504d9a707605f33e2409d352490b812e8e02f8c5785936a0f4c980978a585cbfb29caedfdde69a2a27e2f76b97676289e8a33_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5fc0d116-1967-3ed0-9a37-72b09cad54e0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/protocol/serialize.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 28,
                  "endLine": 56,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        \"type-serialized\": pickle.dumps(type(x)),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "74e7d680051aed344aa80375d112a65a16f421d241ddf83e0e8f5b3a587264761dad3afeb0cb4e1eb9873e28534637f3283773f7c0c26e73f6705a917ec3b7e1_0"
          },
          "properties": {}
        },
        {
          "ruleId": "2ac2d316-969b-31bc-87f4-add62e3c53ca",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/protocol/serialize.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 11,
                  "endLine": 63,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    typ = pickle.loads(header[\"type-serialized\"])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3c93067addad02929627cca1be9629f58ef9aa97f2af8caad5d43c6279bfc7aead883b3b36236550c23695d5f9445dd5f2df2af05b4242b6137121927485769d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ddbf2ff9-52e8-306d-b638-7b96612d5f58",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/protocol/serialize.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 12,
                  "endLine": 110,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    return pickle.loads(pik, buffers=buffers)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3c93067addad02929627cca1be9629f58ef9aa97f2af8caad5d43c6279bfc7aead883b3b36236550c23695d5f9445dd5f2df2af05b4242b6137121927485769d_1"
          },
          "properties": {}
        },
        {
          "ruleId": "bea5fa53-24b2-334f-8693-85dcb50b761d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/protocol/serialize.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 17,
                  "endLine": 81,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    frames[0] = pickle.dumps(\n        x,\n        buffer_callback=buffer_callback,\n        protocol=context.get(\"pickle-protocol\", None) if context else None,\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "74e7d680051aed344aa80375d112a65a16f421d241ddf83e0e8f5b3a587264761dad3afeb0cb4e1eb9873e28534637f3283773f7c0c26e73f6705a917ec3b7e1_1"
          },
          "properties": {}
        },
        {
          "ruleId": "39e4e273-3544-3ede-9795-8c62d04dd363",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/protocol/serialize.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 41,
                  "endLine": 124,
                  "endColumn": 70,
                  "snippet": {
                    "text": "        _cached_allowed_modules[name] = importlib.import_module(name)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "048f305118caa3f535b4a70cd77fdad2e59c95788ed7bed2272c89245b8c29ac64d8d53930f59d242090d75adef2ce3779a16b7dcb3c22cc62947183a8302aff_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c611d16e-f788-3bec-a2d3-89070f8cf2a2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/protocol/serialize.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 892,
                  "startColumn": 32,
                  "endLine": 892,
                  "endColumn": 55,
                  "snippet": {
                    "text": "            \"type-serialized\": pickle.dumps(type(est)),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "74e7d680051aed344aa80375d112a65a16f421d241ddf83e0e8f5b3a587264761dad3afeb0cb4e1eb9873e28534637f3283773f7c0c26e73f6705a917ec3b7e1_2"
          },
          "properties": {}
        },
        {
          "ruleId": "976daa18-f30f-3763-9120-e163566a859c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/pytest_resourceleaks.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 322,
                  "startColumn": 13,
                  "endLine": 323,
                  "endColumn": 38,
                  "snippet": {
                    "text": "            f\"leaked {(bytes_after - bytes_before) / 2 ** 20:.1f} MiB \"\n            \"of traced Python memory\""
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "825708606bc5c2c753f9c4d6c79c56079453eb4b35a1a2b229039beccf83c12ea6cbef3d96cfa8904a69644e42c1d403d26e374661ddc4ea67f33506546a3615_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c7305651-91fc-39ef-9775-712aecfb3e49",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/protocol/serialize.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 921,
                  "startColumn": 15,
                  "endLine": 921,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        cls = pickle.loads(header[\"type-serialized\"])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3c93067addad02929627cca1be9629f58ef9aa97f2af8caad5d43c6279bfc7aead883b3b36236550c23695d5f9445dd5f2df2af05b4242b6137121927485769d_2"
          },
          "properties": {}
        },
        {
          "ruleId": "009bff58-8631-3ea6-b29f-8607e732031c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/pytest_resourceleaks.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 410,
                  "startColumn": 13,
                  "endLine": 410,
                  "endColumn": 23,
                  "snippet": {
                    "text": "            sleep(0.1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2d3207740f38e0666d3c90e663cccba18afa1d46c7a4ac49598e8073a704a5e56b417d1897108fac5eef70ccb2d3f570ec44fb916be23631c5d70d784a82dabe_0"
          },
          "properties": {}
        },
        {
          "ruleId": "0f5496e3-a0ac-3d41-8c18-efc9a7c3d7ab",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/pytest_resourceleaks.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 486,
                  "startColumn": 29,
                  "endLine": 487,
                  "endColumn": 63,
                  "snippet": {
                    "text": "                            f\"{nodeid} leaking {checker.name}: \"\n                            f\"{checker.format(before, after)}\""
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "825708606bc5c2c753f9c4d6c79c56079453eb4b35a1a2b229039beccf83c12ea6cbef3d96cfa8904a69644e42c1d403d26e374661ddc4ea67f33506546a3615_1"
          },
          "properties": {}
        },
        {
          "ruleId": "99003ef4-9238-32d0-a3e8-6d85bdcd253c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/scheduler.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1517,
                  "startColumn": 17,
                  "endLine": 1517,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                pdb.set_trace()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7b9f69ff1affb304cf2bd6f627a3b29c60e3ac261863c444fd7716de2e581e81a7c03b2fa9fe01a4fe9dab204bedf1e568190c96c815e478e083ba7543a1d070_0"
          },
          "properties": {}
        },
        {
          "ruleId": "0f0ad707-7257-3615-a4ac-40b744aff676",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/scheduler.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3251,
                  "startColumn": 27,
                  "endLine": 3251,
                  "endColumn": 57,
                  "snippet": {
                    "text": "                exception=pickle.dumps(MemoryError(msg)),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6e73e8e25af37bf14613e0bde52daff47da4131708385db81222aca9f44f3b698fb15c188cd95e329d8b9c4875cd987418b92766fe751fc31986cc0274507b07_0"
          },
          "properties": {}
        },
        {
          "ruleId": "15cf5035-39a9-3e3f-91e8-c246e687a74c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/scheduler.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3681,
                  "startColumn": 21,
                  "endLine": 3681,
                  "endColumn": 29,
                  "snippet": {
                    "text": "                    return c"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "268183d3fbd6fa2b13cb2b649877466914161b2e1da8b56efdf4c71930c9d61ce3efede23f2d520d6aabb3f46de056a600310aea70b3c9988551f6dbf5affa15_0"
          },
          "properties": {}
        },
        {
          "ruleId": "0ccc0909-f4ad-3ab6-ad7e-8f4477cab0b8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/scheduler.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 5543,
                  "startColumn": 17,
                  "endLine": 5543,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                pdb.set_trace()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7b9f69ff1affb304cf2bd6f627a3b29c60e3ac261863c444fd7716de2e581e81a7c03b2fa9fe01a4fe9dab204bedf1e568190c96c815e478e083ba7543a1d070_2"
          },
          "properties": {}
        },
        {
          "ruleId": "e4217b59-bc1b-3d99-b9ae-0b0ac0e7b7f3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/scheduler.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 5246,
                  "startColumn": 25,
                  "endLine": 5252,
                  "endColumn": 22,
                  "snippet": {
                    "text": "                    e = pickle.dumps(\n                        KilledWorker(\n                            task=k,\n                            last_worker=ws.clean(),\n                            allowed_failures=self.allowed_failures,\n                        ),\n                    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6e73e8e25af37bf14613e0bde52daff47da4131708385db81222aca9f44f3b698fb15c188cd95e329d8b9c4875cd987418b92766fe751fc31986cc0274507b07_1"
          },
          "properties": {}
        },
        {
          "ruleId": "81f99891-0157-35aa-8f04-e5a28a2e86ef",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/scheduler.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 5779,
                  "startColumn": 17,
                  "endLine": 5779,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                pdb.set_trace()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7b9f69ff1affb304cf2bd6f627a3b29c60e3ac261863c444fd7716de2e581e81a7c03b2fa9fe01a4fe9dab204bedf1e568190c96c815e478e083ba7543a1d070_3"
          },
          "properties": {}
        },
        {
          "ruleId": "e840e4ca-31b3-318c-8701-747887da0e77",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/scheduler.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7151,
                  "startColumn": 19,
                  "endLine": 7151,
                  "endColumn": 36,
                  "snippet": {
                    "text": "            key = pickle.loads(key)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c3981822e2693905a79f3ae30fb2a0d7d54ad441a31829b01ef539d1c89084796d0f046bb9265973c32282ea615858592063ff7f6bb70acfb0a1403aa9fdc66e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "11e1eff9-e848-37c8-9f4e-a7aed36bc4a2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/scheduler.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7569,
                  "startColumn": 21,
                  "endLine": 7569,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            setup = pickle.loads(setup)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c3981822e2693905a79f3ae30fb2a0d7d54ad441a31829b01ef539d1c89084796d0f046bb9265973c32282ea615858592063ff7f6bb70acfb0a1403aa9fdc66e_2"
          },
          "properties": {}
        },
        {
          "ruleId": "b023257f-a9cd-3398-b8ea-892076bf087e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/scheduler.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7567,
                  "startColumn": 24,
                  "endLine": 7567,
                  "endColumn": 46,
                  "snippet": {
                    "text": "            function = pickle.loads(function)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c3981822e2693905a79f3ae30fb2a0d7d54ad441a31829b01ef539d1c89084796d0f046bb9265973c32282ea615858592063ff7f6bb70acfb0a1403aa9fdc66e_1"
          },
          "properties": {}
        },
        {
          "ruleId": "505ecfaf-5af1-3850-a6c0-b89b63cfd215",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/scheduler.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7572,
                  "startColumn": 24,
                  "endLine": 7572,
                  "endColumn": 46,
                  "snippet": {
                    "text": "            teardown = pickle.loads(teardown)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c3981822e2693905a79f3ae30fb2a0d7d54ad441a31829b01ef539d1c89084796d0f046bb9265973c32282ea615858592063ff7f6bb70acfb0a1403aa9fdc66e_3"
          },
          "properties": {}
        },
        {
          "ruleId": "c5dd245a-580f-345d-a3be-3a7b16296d0e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The 'ssl' module disables insecure cipher suites by default. Therefore, use of 'set_ciphers()' should only be used when you have very specialized requirements. Otherwise, you risk lowering the security of the SSL channel."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/security.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 17,
                  "endLine": 331,
                  "endColumn": 52,
                  "snippet": {
                    "text": "                ctx.set_ciphers(tls.get(\"ciphers\"))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7f79296689e75f5c886b14feb0bf50e7b367896f6648fdf7c60012e07c451d01438f2082580076b70593ad02231c2d3da9ebfcd48e22b1b8f6058ba02514be28_0"
          },
          "properties": {}
        },
        {
          "ruleId": "2943445f-7f32-37c1-a683-fda7817f6031",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/shuffle/_core.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 45,
                  "endLine": 219,
                  "endColumn": 65,
                  "snippet": {
                    "text": "            shards_or_bytes: list | bytes = pickle.dumps(shards)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4af80657ddd8d838ca20260df0f03bc0298562f2a3d3ff065cd6c3c96d2ffee7065b7be0c4e1b01c0b3084727a3296012345717d6ae85bec6aa77340c32301fc_0"
          },
          "properties": {}
        },
        {
          "ruleId": "3b817771-c302-30aa-81cf-f4b4006af566",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function `_continue` is defined inside a function but never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/shuffle/_buffer.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 9,
                  "endLine": 141,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        def _continue() -> bool:\n            return bool(self.shards or self._inputs_done)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8de5e0d0e0f77a242c3184b9517ad5d3930f736a82ec19d57459cd2a1afefe474a9e33b713eca571c133e060c97245d841e7130767af0dfbadb03f10f5a95227_0"
          },
          "properties": {}
        },
        {
          "ruleId": "6b2825fd-e846-372e-a276-c4d62a3674af",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/shuffle/_core.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 308,
                  "startColumn": 60,
                  "endLine": 308,
                  "endColumn": 78,
                  "snippet": {
                    "text": "            data = cast(list[tuple[_T_partition_id, Any]], pickle.loads(data))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4e21f4fe19f0bdc42e2a634a98d13bfb9734525b915896b1520eedfc0d5e0cc8d13e8a8b268899361bde669d9a6fa07478e29fa22eee894ef85e7230a31934f0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "606bb5f0-7a4c-37b9-9105-d4ddb8b82280",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/shuffle/_pickle.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 11,
                  "endLine": 23,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    pik = pickle.dumps(\n        obj, protocol=5, buffer_callback=lambda pb: frames.append(pb.raw())\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6856546db7597745d451d67eb59e1cc67320854d44239314399495682adb94420d5be919e1605140dd2756e715996f8961af91cf26d60b853291baf6d5b06512_0"
          },
          "properties": {}
        },
        {
          "ruleId": "88041415-fb35-3d2d-822f-20f1ed0dfde0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/shuffle/_pickle.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 15,
                  "endLine": 39,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        yield pickle.loads(pik, buffers=buffers)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "fc6d63552313896bbc90315443f02015036d942b60d832e5f3ebb5760093744a2f4d6cf717140a5cb7737de10f5f8c0fbc9343a4cabfaa2afe57d9ce21648305_0"
          },
          "properties": {}
        },
        {
          "ruleId": "4b99552b-429a-38bf-9eb6-919071b1244b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/shuffle/_scheduler_plugin.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 47,
                  "endLine": 65,
                  "endColumn": 64,
                  "snippet": {
                    "text": "        self.heartbeats = defaultdict(lambda: defaultdict(dict))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "689150cb59f92c88ad79f052fe5c5287ee261e6244dafcc2f73fe3d4bd08be8d1a3c40192dd8dd84d3c1ee96cf6c2512591e67597b20e96f9baafde343258298_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f5079204-b02f-33c9-809d-5a61e51aa210",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/stealing.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 17,
                  "endLine": 330,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                pdb.set_trace()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0f25b7ad4ebf2021ab860b8628f5d0b69da5e28562984cf4f8fd9fd6dbbe3edb2fa48fb7ca3407e8ac716f961251b75f74242a239343f20c846f7fd389e1faed_0"
          },
          "properties": {}
        },
        {
          "ruleId": "21c65824-580c-3906-8153-cf904b9b6f8b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/stealing.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 395,
                  "startColumn": 17,
                  "endLine": 395,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                pdb.set_trace()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0f25b7ad4ebf2021ab860b8628f5d0b69da5e28562984cf4f8fd9fd6dbbe3edb2fa48fb7ca3407e8ac716f961251b75f74242a239343f20c846f7fd389e1faed_1"
          },
          "properties": {}
        },
        {
          "ruleId": "52e43caf-a095-3224-bbf7-1980460c0b12",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE)\nattacks. The Python documentation recommends the 'defusedxml' library instead. Use 'defusedxml'.\nSee https://github.com/tiran/defusedxml for more information.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 29,
                  "snippet": {
                    "text": "import xml.etree.ElementTree"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "570f909fa120c1f0d324d9bac1f4fb95a9d6d8b0b775106c36e6679d90e9c7a4c7794d90d50745dfb21103e65264629c6ebb64540c48b197e1639fd2a7962338_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b1d16f31-195f-3859-94a9-e9ab2df6982d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 17,
                  "endLine": 129,
                  "endColumn": 45,
                  "snippet": {
                    "text": "                importlib.import_module(pkg)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "50403b1a20c39b58dcbe26a31aa220b444b2aabe964d0259e311f7b936cefbda3d1a30a4833e013c99baffae299d514ee41fc70c9e2ed5dcffc2debc5f902f2e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "2b42dfb7-ba5c-3ea0-8f29-007c03fe61a3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"[a-f0-9]{32}\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 737,
                  "startColumn": 31,
                  "endLine": 737,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        elif len(x) == 32 and re.match(r\"[a-f0-9]{32}\", x):"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "762b0cc89e5cb1531e868b05b6e0e8c257b34a831574686e8c83b8e94f2533364972b8c7095bc8b3d09384470db3345c8137c8765cc25fbe232d538be2738394_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f87bdf14-fbc2-35c6-a393-3fb707a09222",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 864,
                  "startColumn": 13,
                  "endLine": 864,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            pdb.set_trace()  # pragma: nocover"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3566b681693894c54bffd0f7b8055c172ad766ef8b890288e07d5822a9ab1df7e41cbc2abb29f9c3aaacf486366adb3c9b9213fcd94d373206cbcb89fb513dab_0"
          },
          "properties": {}
        },
        {
          "ruleId": "90191f17-c65a-3030-a625-6e175bedd1e6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1119,
                  "startColumn": 16,
                  "endLine": 1119,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        return PickleBuffer(obj).raw()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "245a3e4bd4d0166740af862d329e694e89459cef21b11f20ee09f0a5cc541ec1c93b999861313c5f9090725db2363c7c087d115fe107d39719e790c6c8021e23_0"
          },
          "properties": {}
        },
        {
          "ruleId": "238b5cd1-94e4-3974-95a2-a27582a41382",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1170,
                  "startColumn": 48,
                  "endLine": 1170,
                  "endColumn": 77,
                  "snippet": {
                    "text": "                loaded.append(importlib.reload(importlib.import_module(name)))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "48cda1f2b1d8aeccd360a0636e5e1dbac7281151f1b95668f6b54f84e6c2e11a72eaf0a28adf58ed2e74c61d1b495129f1bfd3802cdf8509d7b1a663ae2cfb2d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "2d8e0e4d-219b-339e-a9fa-5192191df0fb",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1221,
                  "startColumn": 9,
                  "endLine": 1221,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        sleep(0.1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2438a6c02f5d1113845bfc2ebde547e2d4c20ee8efbddc344fcc393161bedaf5e1774465d66adafc7071f38f25163b95fe86d02c656ac7b37c81749a88ff374c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "9b4a38be-62cb-3ea5-95cb-42f1b94a51b1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1276,
                  "startColumn": 23,
                  "endLine": 1276,
                  "endColumn": 41,
                  "snippet": {
                    "text": "                cmd = import_module(cmd)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bfadabf76b1cc3e7bbb0ebc36c1d9a65e57ac0ea7498582ee2f7cd121b94c43955e4a1f5b89f4bd0e44c13db41a9df85ee52a1738cb0bf3c137a628c01f03ab4_0"
          },
          "properties": {}
        },
        {
          "ruleId": "44745323-f975-302d-b9b5-dc492614f7ae",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1319,
                  "startColumn": 9,
                  "endLine": 1319,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    h = md5(str(x).encode())"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "afe86f1b0662cea0c520a1ec4f6e23c0c5e82d7356e3abacbf08df2af6785a03106cc62b5bdc7b25ce46db76edc0b26fb642ebab6cb8ab8f18958e88cf6e8069_0"
          },
          "properties": {}
        },
        {
          "ruleId": "19844304-4890-3b5b-b0b9-815c38277cd9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure XML parsing functionality, prefer 'defusedxml'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1498,
                  "startColumn": 12,
                  "endLine": 1498,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    return xml.etree.ElementTree.fromstring(text) is not None"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6f6f261ea91a3c2f38507eb67bf143c26dd0ab9ef0d1edc90861279f3f59ac8025981e63d36576ad872bc23fd1b573b1f0c29445f29ee9d12b98d78e17e16e06_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5265e71e-8ac5-33ca-865c-f9a5488623d6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1515,
                  "startColumn": 16,
                  "endLine": 1515,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        return importlib.import_module(name)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "48cda1f2b1d8aeccd360a0636e5e1dbac7281151f1b95668f6b54f84e6c2e11a72eaf0a28adf58ed2e74c61d1b495129f1bfd3802cdf8509d7b1a663ae2cfb2d_1"
          },
          "properties": {}
        },
        {
          "ruleId": "08266d15-9c6c-3c2d-ad52-ea2c1ab30def",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1517,
                  "startColumn": 14,
                  "endLine": 1517,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    module = importlib.import_module(module_name)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e38bef19b504a1f87bfe9dd9b22b4eeffbcebd947c43b2560e3dd009b172371b1b666f83ff02991f8f8f4b264b4b1640e19c64369aa502fccf292768b7c38736_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ec2e85ba-762b-3fcd-a128-f891a2963df4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `pattern` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1928,
                  "startColumn": 24,
                  "endLine": 1928,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        self.pattern = re.compile(pattern)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8deadc7adbdd8865b5e0dc62674984911c0506f70a1f5d340b952e359435b67a465d5c70a7714e517cd9f93af486b640998fd7365436cbcb3f0b02ec064a8efb_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c058a88e-b1fc-38e8-a170-921d3838ec69",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/utils_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 34,
                  "endLine": 113,
                  "endColumn": 38,
                  "snippet": {
                    "text": "_offload_executor.submit(lambda: None).result()  # create thread during import"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "93faf5e46f651bfdf6322b0d0ac20ce89caf5c211e6ce3e4cbf32d3f9f3f06b0ecda8c9ac132063de3a4ae4d2ed109b4ff78d7700eab2983b6c1b11e4d77e0e7_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5f609fca-c70c-36f1-938e-0fb7897749c1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function `_client_factory` is defined inside a function but never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/utils_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 946,
                  "startColumn": 13,
                  "endLine": 957,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            @contextlib.asynccontextmanager\n            async def _client_factory(s):\n                if client:\n                    async with Client(\n                        s.address,\n                        security=security,\n                        asynchronous=True,\n                        **client_kwargs,\n                    ) as c:\n                        yield c\n                else:\n                    yield"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bf85656c4bc837018e8286428fb84489298902f709d10b1e8e7b374eae5f23facfbd17b697edc16a16fdca564e05e0cd7fd5db83dd09d4aa385bba1f24813537_0"
          },
          "properties": {}
        },
        {
          "ruleId": "3e8be17a-0114-38c7-8b7c-bae3cb96f903",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function `_cluster_factory` is defined inside a function but never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/utils_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 959,
                  "startColumn": 13,
                  "endLine": 993,
                  "endColumn": 70,
                  "snippet": {
                    "text": "            @contextlib.asynccontextmanager\n            async def _cluster_factory():\n                workers = []\n                s = None\n                try:\n                    for _ in range(60):\n                        try:\n                            s, ws = await start_cluster(\n                                nthreads,\n                                scheduler,\n                                security=security,\n                                Worker=Worker,\n                                scheduler_kwargs=scheduler_kwargs,\n                                worker_kwargs=merge(\n                                    {\"death_timeout\": min(15, int(deadline.remaining))},\n                                    worker_kwargs,\n                                ),\n                            )\n                        except Exception as e:\n                            logger.error(\n                                \"Failed to start gen_cluster: \"\n                                f\"{e.__class__.__name__}: {e}; retrying\",\n                                exc_info=True,\n                            )\n                            await asyncio.sleep(1)\n                        else:\n                            workers[:] = ws\n                            break\n                    if s is None:\n                        raise Exception(\"Could not start cluster\")\n                    yield s, workers\n                finally:\n                    if s is not None:\n                        await end_cluster(s, workers)\n                    await utils_wait_for(cleanup_global_workers(), 1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bf85656c4bc837018e8286428fb84489298902f709d10b1e8e7b374eae5f23facfbd17b697edc16a16fdca564e05e0cd7fd5db83dd09d4aa385bba1f24813537_1"
          },
          "properties": {}
        },
        {
          "ruleId": "894d7b0a-d02f-37eb-86a5-736af455b465",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function `async_fn` is defined inside a function but never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/utils_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 995,
                  "startColumn": 13,
                  "endLine": 1094,
                  "endColumn": 34,
                  "snippet": {
                    "text": "            async def async_fn():\n                result = None\n                with dask.config.set(config):\n                    async with (\n                        _cluster_factory() as (s, workers),\n                        _client_factory(s) as c,\n                    ):\n                        args = [s] + workers\n                        if c is not None:\n                            args = [c] + args\n                        try:\n                            coro = func(*args, *outer_args, **kwargs)\n                            task = asyncio.create_task(coro)\n                            coro2 = utils_wait_for(\n                                asyncio.shield(task), timeout=deadline.remaining\n                            )\n                            result = await coro2\n                            validate_state(s, *workers)\n\n                        except asyncio.TimeoutError:\n                            assert task\n                            elapsed = deadline.elapsed\n                            buffer = io.StringIO()\n                            # This stack indicates where the coro/test is suspended\n                            task.print_stack(file=buffer)\n\n                            if cluster_dump_directory:\n                                await dump_cluster_state(\n                                    s=s,\n                                    ws=workers,\n                                    output_dir=cluster_dump_directory,\n                                    func_name=func.__name__,\n                                )\n\n                            task.cancel()\n                            while not task.cancelled():\n                                await asyncio.sleep(0.01)\n\n                            # Hopefully, the hang has been caused by inconsistent\n                            # state, which should be much more meaningful than the\n                            # timeout\n                            validate_state(s, *workers)\n\n                            # Remove as much of the traceback as possible; it's\n                            # uninteresting boilerplate from utils_test and asyncio\n                            # and not from the code being tested.\n                            raise asyncio.TimeoutError(\n                                f\"Test timeout ({timeout}) hit after {elapsed}s.\\n\"\n                                \"========== Test stack trace starts here ==========\\n\"\n                                f\"{buffer.getvalue()}\"\n                            ) from None\n\n                        except pytest.xfail.Exception:\n                            raise\n\n                        except Exception:\n                            if cluster_dump_directory and not has_pytestmark(\n                                test_func, \"xfail\"\n                            ):\n                                await dump_cluster_state(\n                                    s=s,\n                                    ws=workers,\n                                    output_dir=cluster_dump_directory,\n                                    func_name=func.__name__,\n                                )\n                            raise\n\n                    try:\n                        c = default_client()\n                    except ValueError:\n                        pass\n                    else:\n                        await c._close(fast=True)\n\n                    try:\n                        unclosed = [c for c in Comm._instances if not c.closed()] + [\n                            c for c in _global_clients.values() if c.status != \"closed\"\n                        ]\n                        try:\n                            if unclosed:\n                                if allow_unclosed:\n                                    print(f\"Unclosed Comms: {unclosed}\")\n                                else:\n                                    raise RuntimeError(\"Unclosed Comms\", unclosed)\n                        finally:\n                            del unclosed\n                    finally:\n                        Comm._instances.clear()\n                        _global_clients.clear()\n\n                        for w in workers:\n                            if getattr(w, \"data\", None):\n                                try:\n                                    w.data.clear()\n                                except OSError:\n                                    # zict backends can fail if their storage directory\n                                    # was already removed\n                                    pass\n\n                    return result"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bf85656c4bc837018e8286428fb84489298902f709d10b1e8e7b374eae5f23facfbd17b697edc16a16fdca564e05e0cd7fd5db83dd09d4aa385bba1f24813537_2"
          },
          "properties": {}
        },
        {
          "ruleId": "33e8532e-d02e-35fb-acee-c69551cc96cb",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'Popen' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/utils_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1246,
                  "startColumn": 10,
                  "endLine": 1246,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    with subprocess.Popen(args, **kwargs) as proc:"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f7cdc241acdb2b790b3e8bb8b56c752c0d6c79b63419d9a53f6bc13a0e21f696f14902dacec6a443af3cf35b8dcc929368209bf3aa1426b53ee7d0134afb8c84_0"
          },
          "properties": {}
        },
        {
          "ruleId": "eedefb1a-3078-3133-b6bc-e00f92bfd1bc",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/utils_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1309,
                  "startColumn": 9,
                  "endLine": 1310,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        serv = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)\n        serv.bind((\"::\", 0))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0c63bef5d0068827d9b855fcc413355b97078eb7829b392d9c71ef00881b1673716e040f4ded624341de58bfc14ea426629faa94feb4d5e557c37c7d458c66f1_0"
          },
          "properties": {}
        },
        {
          "ruleId": "37a3dde8-9bba-3d97-beb6-26101689104c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "It appears that `sys.modules[elem]` is a dict with items being deleted while in a for loop. This is usually a bad idea and will likely lead to a RuntimeError: dictionary changed size during iteration"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/utils_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1634,
                  "startColumn": 9,
                  "endLine": 1636,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        for elem in sys.modules.keys():\n            if elem not in old_modules:\n                del sys.modules[elem]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "00d59d208370da8cfae8338690a9ce67e274747d762ad2531807339e1a4d5a47b7fdcd85d380b4e44a1b88181ecaabf1973bef6a33e7973e32d9b47378c005b6_0"
          },
          "properties": {}
        },
        {
          "ruleId": "32c8a31b-5ffa-3324-baf4-2311f6d91ee7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/utils_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1658,
                  "startColumn": 13,
                  "endLine": 1658,
                  "endColumn": 24,
                  "snippet": {
                    "text": "            sleep(0.01)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f25ea7181f5cd5a3514f5606f07a26e1f682443de489babcc3bb07cdb79fa97fba0b9c15b26a472f32d9bc9dcf9f021352fdc5e3c4b5ae9775bb76ed83bb20f9_0"
          },
          "properties": {}
        },
        {
          "ruleId": "0d0cdf93-b515-3db2-ad85-d274299693a1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/utils_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1760,
                  "startColumn": 9,
                  "endLine": 1760,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        sleep(0.1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d89b1d1d237ba1f2e237ddf9640356cdb1932d7baee1807e053df55f26c691e4500ba5be67a9794fd5634a692530ae3c94074e2dfc0a75a599d75f160113ee30_0"
          },
          "properties": {}
        },
        {
          "ruleId": "3daa7272-f85f-38f7-bcac-ca0403f2a52e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/utils_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1774,
                  "startColumn": 9,
                  "endLine": 1774,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        sleep(0.1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d89b1d1d237ba1f2e237ddf9640356cdb1932d7baee1807e053df55f26c691e4500ba5be67a9794fd5634a692530ae3c94074e2dfc0a75a599d75f160113ee30_1"
          },
          "properties": {}
        },
        {
          "ruleId": "19dc4f8c-a975-3812-81db-cd085faef2b2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/utils_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1782,
                  "startColumn": 13,
                  "endLine": 1782,
                  "endColumn": 23,
                  "snippet": {
                    "text": "            sleep(0.1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d89b1d1d237ba1f2e237ddf9640356cdb1932d7baee1807e053df55f26c691e4500ba5be67a9794fd5634a692530ae3c94074e2dfc0a75a599d75f160113ee30_2"
          },
          "properties": {}
        },
        {
          "ruleId": "f1227fbc-cbe0-3041-85f6-c3a663454fb8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Function 'ws_with_running_task' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/utils_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2494,
                  "startColumn": 1,
                  "endLine": 2513,
                  "endColumn": 13,
                  "snippet": {
                    "text": "@pytest.fixture(params=[\"executing\", \"long-running\"])\ndef ws_with_running_task(ws, request):\n    \"\"\"A WorkerState running a single task 'x' with resources {R: 1}.\n\n    The task may or may not raise secede(); the tests using this fixture runs twice.\n    \"\"\"\n    ws.available_resources = {\"R\": 1}\n    ws.total_resources = {\"R\": 1}\n    instructions = ws.handle_stimulus(\n        ComputeTaskEvent.dummy(\n            key=\"x\", resource_restrictions={\"R\": 1}, stimulus_id=\"compute\"\n        )\n    )\n    assert instructions == [Execute(key=\"x\", stimulus_id=\"compute\")]\n    if request.param == \"long-running\":\n        ws.handle_stimulus(\n            SecedeEvent(key=\"x\", compute_duration=1.0, stimulus_id=\"secede\")\n        )\n    assert ws.tasks[\"x\"].state == request.param\n    yield ws"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bb712791cd32ea1548ddf4fac3d396220eb354a06b9d95404d7c31237f634941ceced52950cdef713ce8892e19405a8e47b48f88e67e5babe2922e707e271049_0"
          },
          "properties": {}
        },
        {
          "ruleId": "542d553c-2e3e-39be-9dc5-ff44f986337f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Function 'name_of_test' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/utils_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2516,
                  "startColumn": 1,
                  "endLine": 2518,
                  "endColumn": 36,
                  "snippet": {
                    "text": "@pytest.fixture()\ndef name_of_test(request):\n    return f\"{request.node.nodeid}\""
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0187d88a9494bf732cdc4df758d96824292b19c324a8b4941176d3cbb8f3d6db6f05dbc10727136f0551fad4074c23eb4f4598b3570b208afe8233d4eddad326_0"
          },
          "properties": {}
        },
        {
          "ruleId": "9ab9e489-657c-3d09-897f-84fa864f3e5e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/utils_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2546,
                  "startColumn": 17,
                  "endLine": 2546,
                  "endColumn": 25,
                  "snippet": {
                    "text": "                sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "506e48f05e07afbfd4b3feb37c033664b43559fe25ddb32c98adfa91df031ff898a25617c9b263ecd703c29edc4bdb9b1a11a5d330a7ceadc8e5f3436277ac8b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "86b4d35a-d07b-3b36-a677-b329c598fb71",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/versions.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 24,
                  "endLine": 20,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    (\"dask\", lambda p: p.__version__),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "afa62598eaa71af1d870de25ef11e87b639f41b5fe64276a97396f92e758041e67a8aa0593e7908b474a4e6127ddc9743f2d67d4193600c8ff6900e1f3f52d4f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "3532f127-a13f-343c-8504-2ec608b57b74",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/versions.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 31,
                  "endLine": 21,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    (\"distributed\", lambda p: p.__version__),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "afa62598eaa71af1d870de25ef11e87b639f41b5fe64276a97396f92e758041e67a8aa0593e7908b474a4e6127ddc9743f2d67d4193600c8ff6900e1f3f52d4f_1"
          },
          "properties": {}
        },
        {
          "ruleId": "dcd5c4e9-72e5-3d29-be53-0409564a2040",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/versions.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 27,
                  "endLine": 22,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    (\"msgpack\", lambda p: \".\".join([str(v) for v in p.version])),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "afa62598eaa71af1d870de25ef11e87b639f41b5fe64276a97396f92e758041e67a8aa0593e7908b474a4e6127ddc9743f2d67d4193600c8ff6900e1f3f52d4f_2"
          },
          "properties": {}
        },
        {
          "ruleId": "59e6766b-9ad3-3d84-9d7c-403333ad09ca",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/versions.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 31,
                  "endLine": 23,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    (\"cloudpickle\", lambda p: p.__version__),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "afa62598eaa71af1d870de25ef11e87b639f41b5fe64276a97396f92e758041e67a8aa0593e7908b474a4e6127ddc9743f2d67d4193600c8ff6900e1f3f52d4f_3"
          },
          "properties": {}
        },
        {
          "ruleId": "cebe4188-dfe3-322c-a24a-90ada53fdb30",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/versions.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 27,
                  "endLine": 24,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    (\"tornado\", lambda p: p.version),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "afa62598eaa71af1d870de25ef11e87b639f41b5fe64276a97396f92e758041e67a8aa0593e7908b474a4e6127ddc9743f2d67d4193600c8ff6900e1f3f52d4f_4"
          },
          "properties": {}
        },
        {
          "ruleId": "24feed3d-58e2-3fdf-b185-f7801f2003de",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/versions.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 25,
                  "endLine": 25,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    (\"toolz\", lambda p: p.__version__),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "afa62598eaa71af1d870de25ef11e87b639f41b5fe64276a97396f92e758041e67a8aa0593e7908b474a4e6127ddc9743f2d67d4193600c8ff6900e1f3f52d4f_5"
          },
          "properties": {}
        },
        {
          "ruleId": "3ad9f242-3afc-34af-8512-69eac51dccf5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/versions.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 25,
                  "endLine": 29,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    (\"numpy\", lambda p: p.__version__),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "afa62598eaa71af1d870de25ef11e87b639f41b5fe64276a97396f92e758041e67a8aa0593e7908b474a4e6127ddc9743f2d67d4193600c8ff6900e1f3f52d4f_6"
          },
          "properties": {}
        },
        {
          "ruleId": "686307b3-d90e-3b11-9e80-34ef6ff6f636",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/versions.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 26,
                  "endLine": 30,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    (\"pandas\", lambda p: p.__version__),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "afa62598eaa71af1d870de25ef11e87b639f41b5fe64276a97396f92e758041e67a8aa0593e7908b474a4e6127ddc9743f2d67d4193600c8ff6900e1f3f52d4f_7"
          },
          "properties": {}
        },
        {
          "ruleId": "33ab4ebe-50e2-338b-9f95-19f1dffb026b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/versions.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 23,
                  "endLine": 31,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    (\"lz4\", lambda p: p.__version__),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "afa62598eaa71af1d870de25ef11e87b639f41b5fe64276a97396f92e758041e67a8aa0593e7908b474a4e6127ddc9743f2d67d4193600c8ff6900e1f3f52d4f_8"
          },
          "properties": {}
        },
        {
          "ruleId": "5636bbd8-5f3d-3faf-a479-97b309dd3846",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/versions.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 19,
                  "endLine": 105,
                  "endColumn": 51,
                  "snippet": {
                    "text": "            mod = importlib.import_module(modname)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f94d182a78e966c72ab0ecd2e15fed99df90c11d6f73537a486ccaeaf746f10bc5f9b56bd1c67dbc2ec7fc1617bac48198c00a4b3649d1f4b5983831b12f4584_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a2bac368-40b9-35de-994e-1eb05c1218f4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/worker.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 587,
                  "startColumn": 21,
                  "endLine": 587,
                  "endColumn": 27,
                  "snippet": {
                    "text": "            lambda: (0, 0)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "444b5f21720f7326707a321ce058b8f4f420f723d02b557f507e3f4f98b05c7ebd2ac1f7842e0377861b8a6d073ab763e5dcdbafba82eb519e7ddaf5eef5cecd_0"
          },
          "properties": {}
        },
        {
          "ruleId": "7f91130c-3f33-35b0-b8e3-cd21ef578344",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/worker.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 589,
                  "startColumn": 52,
                  "endLine": 589,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        self.bandwidth_types = defaultdict(lambda: (0, 0))  # bw/count recent transfers"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "444b5f21720f7326707a321ce058b8f4f420f723d02b557f507e3f4f98b05c7ebd2ac1f7842e0377861b8a6d073ab763e5dcdbafba82eb519e7ddaf5eef5cecd_1"
          },
          "properties": {}
        },
        {
          "ruleId": "a7c1d00a-c92f-3ccd-8066-3156e6bed679",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/worker.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 799,
                  "startColumn": 39,
                  "endLine": 799,
                  "endColumn": 78,
                  "snippet": {
                    "text": "        pc = PeriodicCallback(lambda: self.batched_send({\"op\": \"keep-alive\"}), 60000)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "444b5f21720f7326707a321ce058b8f4f420f723d02b557f507e3f4f98b05c7ebd2ac1f7842e0377861b8a6d073ab763e5dcdbafba82eb519e7ddaf5eef5cecd_2"
          },
          "properties": {}
        },
        {
          "ruleId": "8a0e6a2c-5e79-3a4e-aede-39c4b223cf6a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/worker.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1854,
                  "startColumn": 22,
                  "endLine": 1854,
                  "endColumn": 42,
                  "snippet": {
                    "text": "            plugin = pickle.loads(plugin)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "46960ed15ba3fb12a1eb12142f52f935d5369a628248ff54fc12549bcf5225ff9746566dfec5fd68609560c957d317efbdc487ffb2defb97cc3875dcf36238fe_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ad049d59-99ec-32b3-a5ce-65e1737de35f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/worker.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2114,
                  "startColumn": 17,
                  "endLine": 2114,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                pdb.set_trace()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "cb93a4566b0d137300680a9c7b43569b406bb4af0d917c885c81cdcb853c8a745b9184d37b0a63cd62bec1def7a807f7ed2acefe82cb7fc972fa88eb7990d95d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f15253a3-64f7-33cf-b6c0-85ee754fe174",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/worker.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2645,
                  "startColumn": 17,
                  "endLine": 2645,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                pdb.set_trace()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "cb93a4566b0d137300680a9c7b43569b406bb4af0d917c885c81cdcb853c8a745b9184d37b0a63cd62bec1def7a807f7ed2acefe82cb7fc972fa88eb7990d95d_1"
          },
          "properties": {}
        },
        {
          "ruleId": "b9826f4a-9b25-3c86-8ef4-8058b9ecca9d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/worker.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2922,
                  "startColumn": 18,
                  "endLine": 2922,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        result = pickle.dumps(func)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5f3d58bf9b4c562b0a3230e4300b44e13a8cd46570632f80f09486deab8cb454ca33960670c6354064bfcbe01cecb1e40c5c1e389640a23dd6301d2e90838540_0"
          },
          "properties": {}
        },
        {
          "ruleId": "0cebb3c3-493b-38bf-927c-fec0dd548b4c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/worker.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2927,
                  "startColumn": 18,
                  "endLine": 2927,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        result = pickle.dumps(func)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5f3d58bf9b4c562b0a3230e4300b44e13a8cd46570632f80f09486deab8cb454ca33960670c6354064bfcbe01cecb1e40c5c1e389640a23dd6301d2e90838540_1"
          },
          "properties": {}
        },
        {
          "ruleId": "ce644ded-f5f8-397e-85c0-1a3a677b8687",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/worker.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3167,
                  "startColumn": 16,
                  "endLine": 3167,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    function = pickle.loads(function)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "46960ed15ba3fb12a1eb12142f52f935d5369a628248ff54fc12549bcf5225ff9746566dfec5fd68609560c957d317efbdc487ffb2defb97cc3875dcf36238fe_1"
          },
          "properties": {}
        },
        {
          "ruleId": "9088bef2-0797-3123-9822-08a2b7eef4e4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/worker.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3171,
                  "startColumn": 16,
                  "endLine": 3171,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        args = pickle.loads(args)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "46960ed15ba3fb12a1eb12142f52f935d5369a628248ff54fc12549bcf5225ff9746566dfec5fd68609560c957d317efbdc487ffb2defb97cc3875dcf36238fe_2"
          },
          "properties": {}
        },
        {
          "ruleId": "7e9758a6-3b29-34e8-892c-7a65e0bffac3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/worker.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3173,
                  "startColumn": 18,
                  "endLine": 3173,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        kwargs = pickle.loads(kwargs)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "46960ed15ba3fb12a1eb12142f52f935d5369a628248ff54fc12549bcf5225ff9746566dfec5fd68609560c957d317efbdc487ffb2defb97cc3875dcf36238fe_3"
          },
          "properties": {}
        },
        {
          "ruleId": "520c5614-a8c5-3e21-a79a-09c29a380108",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/worker.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3376,
                  "startColumn": 28,
                  "endLine": 3376,
                  "endColumn": 49,
                  "snippet": {
                    "text": "                \"message\": pickle.dumps(message),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5f3d58bf9b4c562b0a3230e4300b44e13a8cd46570632f80f09486deab8cb454ca33960670c6354064bfcbe01cecb1e40c5c1e389640a23dd6301d2e90838540_2"
          },
          "properties": {}
        },
        {
          "ruleId": "d28ee907-1b15-3c50-91cf-f8a74afdb708",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/worker.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3377,
                  "startColumn": 29,
                  "endLine": 3377,
                  "endColumn": 51,
                  "snippet": {
                    "text": "                \"category\": pickle.dumps(category),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5f3d58bf9b4c562b0a3230e4300b44e13a8cd46570632f80f09486deab8cb454ca33960670c6354064bfcbe01cecb1e40c5c1e389640a23dd6301d2e90838540_3"
          },
          "properties": {}
        },
        {
          "ruleId": "64c47577-0b2e-32c6-ade6-cbfe07d371df",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/worker_state_machine.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1783,
                  "startColumn": 31,
                  "endLine": 1783,
                  "endColumn": 52,
                  "snippet": {
                    "text": "            type_serialized = pickle.dumps(ts.type)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "be31f7d9acc04ab82e496f617294ae38542c7351f9ab723013304fe14f1957ad695206a91fa1f0bbc020f3544c8dc3626df8723bbb32e64de62af5b9fc82f65b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8b777b8b-4e66-3ed8-b9fb-48203bb245da",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed/worker_state_machine.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1787,
                  "startColumn": 31,
                  "endLine": 1787,
                  "endColumn": 62,
                  "snippet": {
                    "text": "            type_serialized = pickle.dumps(typename(ts.type))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "be31f7d9acc04ab82e496f617294ae38542c7351f9ab723013304fe14f1957ad695206a91fa1f0bbc020f3544c8dc3626df8723bbb32e64de62af5b9fc82f65b_1"
          },
          "properties": {}
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}